<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Community" fullname="Uptane Community">
      <organization>Joint Development Foundation Projects, LLC, Uptane Series (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2022" month="November" day="16"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process when a compromise occurs.</t>

<t>These instructions delineate the set of requirements necessary for specific ECU implementations to satisfy all conformance stipulations of the Uptane Standard. ISO/IEC 13210:1999 Information Technology, as cited in
the <eref target="https://www.iso.org/obp/ui">ISO Online Browsing Platform</eref> defines a
“conformance requirement” as “a requirement stated in a <spanx style="emph">base standard</spanx> that identifies a specific
requirement in a finite, measurable, and unambiguous manner. A <spanx style="emph">conformance requirement</spanx> by itself or in conjunction with other conformance requirements corresponds to an <spanx style="emph">assertion.</spanx>” Individual implementers can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementers wish to have compatible formats, they can use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementer who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>With the exception of the Conformance terminology and Uptane role terminology presented below, please refer to the <eref target="https://uptane.github.io/deployment-considerations/glossary.html">glossary</eref> in the Deployment Best Practices volume for definitions of all terms used in this Standard.</t>

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>. Given the importance of interpreting these terms correctly, we present these definitions here. Note that when referring to actions in the Standard that mandate conformance, the word SHALL will be used, rather than the word MUST.</t>

<t><spanx style="emph">SHALL</spanx> This word or the term “REQUIRED” mean that the definition is an absolute requirement of the specification.
<spanx style="emph">SHALL NOT</spanx> This phrase means that the definition is an absolute prohibition of the specification.
<spanx style="emph">SHOULD</spanx> This word or the adjective “RECOMMENDED” mean that, in particular circumstances, there could exist valid reasons to ignore a particular item, but the full implications will be understood and carefully weighed before choosing a different course.
<spanx style="emph">SHOULD NOT</spanx> This phrase or the phrase “NOT RECOMMENDED” mean that there could exist valid reasons in particular circumstances when the particular behavior is acceptable or even useful, but the full implications will be understood and the case carefully weighed before implementing any behavior described with this label.
<spanx style="emph">MAY</spanx> This word or the adjective “OPTIONAL,” mean that an item is truly optional.</t>

<t>In order to be considered conformant to the Uptane Standard, an implementation SHALL follow all of these rules as specified in the document.</t>

<t>Note that, following the recommendations of <xref target="RFC2119"/>, imperatives of the type defined here will be used only when essential for security.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegation</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.</t>

<t><spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing the metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-the-uptane-standard" title="Rationale for and scope of the Uptane Standard">

<t>This Standard document provides the essential components for the secure design, implementation, and deployment of Uptane by OEMs and suppliers. These guidelines contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation can refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration, and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation, and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standard-coverage" title="Scope of Standard coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and autonomous aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs SHALL be able to perform public key cryptography operations and calculate hashes of images and metadata files.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s in-vehicle implementation is Uptane-conformant if:</t>

<t><list style="numbers">
  <t>all Primaries perform full verification;</t>
  <t>all Secondaries that are updated via OTA at least perform partial verification; and</t>
  <t>any ECUs that do not perform any type of verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature, all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its Image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the Director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM will first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM will then add the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs can be lacking the necessary resources to function as designated. These insufficient resources could include limited CPU or RAM inadequate for performance of public key cryptography; a lack of sufficient storage to undo installation of bad software; or a location on a low-speed network (e.g., LIN).</t>
  <t>ECUs can reside on different network segments, and cannot directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user can replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle can download only a limited amount of data via a cellular channel (e.g. due to limits on a data plan).</t>
  <t>A system can lack sufficient power to download or install software updates.</t>
  <t>Vehicles can be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs can be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which could substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and will be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate guidelines to ensure that, when any part of the SOTA mechanism of a vehicle is attacked, an attacker has to compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker could have (<xref target="attacker_goals"/>) and the capabilities they could have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers could want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability.</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems.</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions.</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself.</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers could develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability could be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories.</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g., via an OBD port or by using a compromised ECU as a vector).</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle.</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need to protect information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates could attempt one or more of the following strategies:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t><spanx style="emph">Denial of service attack</spanx> against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior could do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This could be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane does not specify implementation details. Instead, this Standard describes the components necessary for a conformant implementation and leaves it up to individual implementers to make their own technology choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install and signed metadata about those images.</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository.</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images.</t>
  <t>A public key infrastructure supporting the required metadata production and signing roles on each repository:
  <list style="symbols">
      <t>Root - The certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata.</t>
      <t>Timestamp - Indicates whether there are new metadata or images.</t>
      <t>Snapshot - Indicates images released by the repository at a point in time via signing metadata about Targets metadata.</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes.</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The Primary ECU can be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata.</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles if they are compromised.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository can delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it SHALL do so as specified in <xref target="delegations_meta"/>.</t>

<t>As responsibility for signing images or a subset of images could be delegated to more than one role, it is possible that two different roles will be trusted to sign a particular image. For this reason, delegations SHALL be prioritized.</t>

<t>A particular delegation for a subset of images could be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images could be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles SHALL sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository SHALL NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It SHALL do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane Standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure can be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings SHALL be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>The <spanx style="emph">Deployment Best Practices</spanx> (<xref target="DEPLOY"/>), Joint Development Foundation Projects, LLC, Uptane Series provides some examples of metadata structures in ASN.1 and JSON that conform to the Standard.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key SHALL be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which could be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role.</t>
</list></t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, and file sizes. It can also include other useful information, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository SHALL have their metadata listed in a Targets role.  Each Targets role can provide a list of some images on the repository.  This list SHALL provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<t>If there are no images included in the Targets metadata from the Director repository, then the metadata SHALL include a vehicle identifier in order to avoid a replay attack.</t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to what is required, Targets metadata files can contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the <spanx style="emph">Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that SHALL be present in the Targets metadata from the Director.</t>

<t>Custom metadata can also contain a demarcated field or section that SHALL match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “SHALL match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information SHALL be provided from the Director repository for each image in the Targets metadata:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that SHOULD install the image.</t>
</list></t>

<t>The Director repository could provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the Director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) SHALL be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file can contain any number of delegations and SHALL keep the delegations in prioritized order.</t>

<t>Any metadata file with delegations SHALL provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key SHOULD have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This could be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g., “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that SHALL sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository can contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the Targets metadata file.</t>
</list></t>

<t>The Snapshot metadata could also list the Root metadata filename and version number for the purpose of backwards compatibility. Historically, this was a requirement in TUF, but it is no longer required and does not provide a significant security benefit.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-conformant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, SHALL be present on all Primary ECUs, and SHALL contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this SHALL include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths could be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that SHALL provide signed Targets metadata for images stored at those paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository.</t>
  <t>The name and URL of the Image repository.</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) SHALL be signed by both the Director and Image repository.</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) provides more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the filename in a metadata file or an ECU, and the filename on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader can read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file is not be known in advance by a client, it could be read from, and written to, a repository using a filename without a version number qualification, i.e., FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file SHALL be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
  <t>Filenames of images SHOULD be encoded to prevent a path traversal on the client system, either by using URL encoding or by limiting the allowed character set in the filename.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is <spanx style="emph">snapshot.json</spanx>. The filename on the repository will be <spanx style="emph">61.snapshot.json</spanx>.</t>
  <t>There is an image with the <spanx style="emph">filename acme_firmware.bin</spanx> specified in the Targets metadata, with a SHA3-256 of <spanx style="emph">aaaa</spanx> and a SHA-512/224 of <spanx style="emph">bbbb</spanx>. It will have two filenames on the repository: <spanx style="emph">aaaa.acme_firmware.bin</spanx> and <spanx style="emph">bbbb.acme_firmware.bin</spanx>.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage that permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It could use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository could require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images will be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for Primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.</t>

<t>The Director could encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images on the repository.</t>

<t>The Director repository SHALL implement storage that permits an automated service to write generated metadata files. It could use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository SHALL conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This could be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director could utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director SHOULD drop the request. An implementer can make additional checks if desired. At a minimum, the Director SHOULD check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU version report has not been used before to prevent a replay of the ECU version report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that could be installed. The exact process by which this determination takes place is out of scope for this Standard. However, the Director SHALL take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director could encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementer could use any durable database for this purpose.</t>

<t>The inventory database SHALL record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database can record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-conformant ECU SHALL be able to download and verify image metadata and image binaries before installing a new image and SHALL have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>All ECUs SHALL monitor the download speed of image metadata and image binaries to detect and respond to a slow retrieval attack. If the download is slower than a pre-defined threshold, the ECU SHOULD send an alert to the Director repository, for example as part of the next vehicle version manifest.</t>

<t>Each ECU receiving over-the-air updates in a vehicle is either a Primary or a Secondary ECU. A Primary ECU collects and delivers to the Director vehicle manifests (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time, and downloads and verifies the latest metadata and images for itself and for its Secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs SHALL verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU SHALL perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification. In addition, it can also perform some steps from the full verification process. See the <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs SHALL have a secure source of time. An OEM/Uptane implementer can use any external source of time that is demonstrably secure.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it SHALL have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitimate when it first downloads metadata in the field. See <spanx style="emph">Uptane Deployment Best Practices</spanx> (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs SHALL have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs can also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs SHALL have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU signing key</spanx>. This key, which is unique to the ECU, is used to sign ECU version reports and decrypt images. An ECU key can be either a symmetric key or an asymmetric key. If it is an asymmetric key, there SHOULD be separate keys for encryption and signing. For the purposes of this Standard, the set of keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes. Note that while signing keys are required to be unique to the ECU to avoid replay attacks, the secret keys used to decrypt images need not be unique.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata, and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>Send latest time to Secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Primary SHOULD have a designated set of Secondaries and each Secondary SHALL have at least one Primary responsible for providing its updates</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary can send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary could send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries can send their version reports at any time so that they are already stored on the Primary when it wishes to check for updates. Alternatively, the Primary can request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that SHALL contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g., the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g., the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports SHOULD be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that SHALL contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g., the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e., the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value SHALL change each update cycle.</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There could be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the Primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image even though the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>The Primary SHOULD send the time to each ECU.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL make available to each of its associated Secondaries all new metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this could include fewer metadata files; at a minimum, it includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have sufficient storage to receive it.</t>

<t>For Secondaries without sufficient storage to store a copy of the image, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time. This is optional if the ECU does not have the capacity to verify a time message (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>IF the ECU has the capability to verify a time message, the ECU SHOULD load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU has limited secondary storage, i.e., insufficient buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has sufficient secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and SHALL skip to the next step.) The ECU SHOULD first create a backup of its previous working image and store it elsewhere (e.g., the Primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECU’s hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This could be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the Targets metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has enough secondary storage capacity to store the image, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>When checking hashes, the ECU SHALL additionally check that the length of the image matches the length listed in the metadata.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that have limited secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions could include ensuring the vehicle is in a safe environment for an installation (e.g., the vehicle is parked when updating a specific ECU). Other pre-conditions could include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU SHALL perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

<t>Note that this verification procedure is the smallest set of Uptane checks permissible for an Uptane Secondary ECU. An ECU can additionally implement more metadata checks.</t>

<t>For example, an ECU could also fetch and verify Root metadata from the Director (following the procedure in <xref target="check_root"/>) before checking Targets metadata. Performing this additional check would provide the ECU with a secure way to receive and validate a rotation of the Director’s Targets key.</t>

<t>See <xref target="DEPLOY"/> for more discussion on this topic.</t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification SHALL be performed by Primary ECUs and SHOULD be performed by Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>Before starting full verification, the repository mapping metadata SHALL be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata could be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process SHALL be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process SHALL be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU SHALL skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU SHALL perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU can elect to perform this check only on the metadata for the image it will install. (That is, the image metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same filename listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all SHALL match custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter, if one is used, in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU SHALL return an error code indicating the failure. If a check for a specific type of security attack fails (i.e., rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementer. For example, X could be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file SHALL have been signed by the following: (1) a threshold of unique keys specified in the latest Root metadata file (version N), and (2) a threshold of unique keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) SHALL be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementer. For example, Y could be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of unique keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file SHALL match the hashes and version number listed in the Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of unique keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementer. For example, Z could be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file SHALL match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) This step can be skipped when checking Targets metadata on a partial verification ECU, as these ECUs might not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of unique keys specified in the relevant metadata file. (Checks for an arbitrary software attack.):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU SHALL locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it could also be delegated to another role or to multiple roles. Therefore, all delegations SHALL be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download and check the current metadata file, following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it SHALL include the hardware identifier of the target, and the target name SHALL match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this could recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed or aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that SHALL be in agreement about the non-custom metadata for the image. All multi-role delegations SHALL be resolved using the following procedure. Note that there could be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles that have agreeing (i.e., identical) non-custom metadata and “SHALL match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that SHALL be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there is more than one agreeing set of roles, yet each set has different metadata. If a conflict is found, choose and return the metadata from the set of roles that include the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>



<reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <author>
      <organization>RFC Publisher</organization>
    </author>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized.  This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
  <format target="https://www.rfc-editor.org/info/rfc2119" type="TXT"/>
</reference>

<reference anchor="RFC3647" target="https://www.rfc-editor.org/info/rfc3647">
  <front>
    <title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
    <author fullname="S. Chokhani" initials="S." surname="Chokhani"/>
    <author fullname="W. Ford" initials="W." surname="Ford"/>
    <author fullname="R. Sabett" initials="R." surname="Sabett"/>
    <author fullname="C. Merrill" initials="C." surname="Merrill"/>
    <author fullname="S. Wu" initials="S." surname="Wu"/>
    <author>
      <organization>RFC Publisher</organization>
    </author>
    <date month="November" year="2003"/>
    <abstract>
      <t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="3647"/>
  <seriesInfo name="DOI" value="10.17487/RFC3647"/>
  <format target="https://www.rfc-editor.org/info/rfc3647" type="TXT"/>
</reference>

<reference anchor="RFC5198" target="https://www.rfc-editor.org/info/rfc5198">
  <front>
    <title>Unicode Format for Network Interchange</title>
    <author fullname="J. Klensin" initials="J." surname="Klensin"/>
    <author fullname="M. Padlipsky" initials="M." surname="Padlipsky"/>
    <author>
      <organization>RFC Publisher</organization>
    </author>
    <date month="March" year="2008"/>
    <abstract>
      <t>The Internet today is in need of a standardized form for the transmission of internationalized "text" information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5198"/>
  <seriesInfo name="DOI" value="10.17487/RFC5198"/>
  <format target="https://www.rfc-editor.org/info/rfc5198" type="TXT"/>
</reference>


<reference anchor="NFC" target="https://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>Secure PyPI downloads with signed repository metadata</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="M." surname="Moore">
      <organization></organization>
    </author>
    <author initials="L." surname="Pühringer">
      <organization></organization>
    </author>
    <author initials="J." surname="Locke">
      <organization></organization>
    </author>
    <author initials="L.A." surname="DeLong">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2019" month="November" day="13"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://uptane.github.io/deployment-considerations/index.html">
  <front>
    <title>Uptane Deployment Best Practices</title>
    <author initials="." surname="Members of the Uptane Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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

-->

</rfc>

