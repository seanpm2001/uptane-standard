<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Community" fullname="Uptane Community">
      <organization>Joint Development Foundation Projects, LLC, Uptane Series (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2023" month="January" day="03"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process when a compromise occurs.</t>

<t>These instructions delineate the set of requirements necessary for specific ECU implementations to satisfy all conformance stipulations of the Uptane Standard. ISO/IEC 13210:1999 Information Technology, as cited in
the <eref target="https://www.iso.org/obp/ui">ISO Online Browsing Platform</eref> defines a
“conformance requirement” as “a requirement stated in a <spanx style="emph">base standard</spanx> that identifies a specific
requirement in a finite, measurable, and unambiguous manner. A <spanx style="emph">conformance requirement</spanx> by itself or in conjunction with other conformance requirements corresponds to an <spanx style="emph">assertion.</spanx>” Individual implementers can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementers wish to have compatible formats, they can use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementer who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>With the exception of the Conformance terminology and Uptane role terminology presented below, please refer to the <eref target="https://uptane.github.io/deployment-considerations/glossary.html">glossary</eref> in the Deployment Best Practices volume for definitions of all terms used in this Standard.</t>

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>. Given the importance of interpreting these terms correctly, we present these definitions here. Note that when referring to actions in the Standard that mandate conformance, the word SHALL will be used, rather than the word MUST.</t>

<t><spanx style="emph">SHALL</spanx> This word or the term “REQUIRED” mean that the definition is an absolute requirement of the specification.
<spanx style="emph">SHALL NOT</spanx> This phrase means that the definition is an absolute prohibition of the specification.
<spanx style="emph">SHOULD</spanx> This word or the adjective “RECOMMENDED” mean that, in particular circumstances, there could exist valid reasons to ignore a particular item, but the full implications will be understood and carefully weighed before choosing a different course.
<spanx style="emph">SHOULD NOT</spanx> This phrase or the phrase “NOT RECOMMENDED” mean that there could exist valid reasons in particular circumstances when the particular behavior is acceptable or even useful, but the full implications will be understood and the case carefully weighed before implementing any behavior described with this label.
<spanx style="emph">MAY</spanx> This word or the adjective “OPTIONAL,” mean that an item is truly optional.</t>

<t>In order to be considered conformant to the Uptane Standard, an implementation SHALL follow all of these rules as specified in the document.</t>

<t>Note that, following the recommendations of <xref target="RFC2119"/>, imperatives of the type defined here will be used only when essential for security.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegation</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.</t>

<t><spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing the metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-the-uptane-standard" title="Rationale for and scope of the Uptane Standard">

<t>This Standard document provides the essential components for the secure design, implementation, and deployment of Uptane by OEMs and suppliers. These guidelines contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation can refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration, and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation, and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standard-coverage" title="Scope of Standard coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and autonomous aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs SHALL be able to perform public key cryptography operations and calculate hashes of images and metadata files.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s in-vehicle implementation is Uptane-conformant if:</t>

<t><list style="numbers">
  <t>all Primaries perform full verification;</t>
  <t>all Secondaries that are updated via OTA at least perform partial verification; and</t>
  <t>any ECUs that do not perform any type of verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature, all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its Image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the Director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM will first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM will then add the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs can be lacking the necessary resources to function as designated. These insufficient resources could include limited CPU or RAM inadequate for performance of public key cryptography; a lack of sufficient storage to undo installation of bad software; or a location on a low-speed network (e.g., LIN).</t>
  <t>ECUs can reside on different network segments, and cannot directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user can replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle can download only a limited amount of data via a cellular channel (e.g. due to limits on a data plan).</t>
  <t>A system can lack sufficient power to download or install software updates.</t>
  <t>Vehicles can be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs can be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which could substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and will be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate guidelines to ensure that, when any part of the SOTA mechanism of a vehicle is attacked, an attacker has to compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker could have (<xref target="attacker_goals"/>) and the capabilities they could have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers could want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability.</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems.</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions.</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself.</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers could develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability could be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories.</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g., via an OBD port or by using a compromised ECU as a vector).</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle.</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need to protect information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates could attempt one or more of the following strategies:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t><spanx style="emph">Denial of service attack</spanx> against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior could do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This could be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane does not specify implementation details. Instead, this Standard describes the components necessary for a conformant implementation and leaves it up to individual implementers to make their own technology choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install and signed metadata about those images.</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository.</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images.</t>
  <t>A public key infrastructure supporting the required metadata production and signing roles on each repository:
  <list style="symbols">
      <t>Root - The certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata.</t>
      <t>Timestamp - Indicates whether there are new metadata or images.</t>
      <t>Snapshot - Indicates images released by the repository at a point in time via signing metadata about Targets metadata.</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes.</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The Primary ECU can be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata.</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles if they are compromised.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository can delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it SHALL do so as specified in <xref target="delegations_meta"/>.</t>

<t>As responsibility for signing images or a subset of images could be delegated to more than one role, it is possible that two different roles will be trusted to sign a particular image. For this reason, delegations SHALL be prioritized.</t>

<t>A particular delegation for a subset of images could be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images could be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles SHALL sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository SHALL NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It SHALL do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane Standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure can be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings SHALL be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>The <spanx style="emph">Deployment Best Practices</spanx> (<xref target="DEPLOY"/>), Joint Development Foundation Projects, LLC, Uptane Series provides some examples of metadata structures in ASN.1 and JSON that conform to the Standard.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key SHALL be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which could be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role.</t>
</list></t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, and file sizes. It can also include other useful information, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository SHALL have their metadata listed in a Targets role.  Each Targets role can provide a list of some images on the repository.  This list SHALL provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<t>If there are no images included in the Targets metadata from the Director repository, then the metadata SHALL include a vehicle identifier in order to avoid a replay attack.</t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to what is required, Targets metadata files can contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the <spanx style="emph">Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that SHALL be present in the Targets metadata from the Director.</t>

<t>Custom metadata can also contain a demarcated field or section that SHALL match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “SHALL match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information SHALL be provided from the Director repository for each image in the Targets metadata:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that SHOULD install the image.</t>
</list></t>

<t>The Director repository could provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the Director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) SHALL be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file can contain any number of delegations and SHALL keep the delegations in prioritized order.</t>

<t>Any metadata file with delegations SHALL provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key SHOULD have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This could be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g., “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that SHALL sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository can contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the Targets metadata file.</t>
</list></t>

<t>The Snapshot metadata could also list the Root metadata filename and version number for the purpose of backwards compatibility. Historically, this was a requirement in TUF, but it is no longer required and does not provide a significant security benefit.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-conformant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, SHALL be present on all Primary ECUs, and SHALL contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this SHALL include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths could be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that SHALL provide signed Targets metadata for images stored at those paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository.</t>
  <t>The name and URL of the Image repository.</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) SHALL be signed by both the Director and Image repository.</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) provides more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the filename in a metadata file or an ECU, and the filename on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader can read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file is not be known in advance by a client, it could be read from, and written to, a repository using a filename without a version number qualification, i.e., FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file SHALL be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
  <t>Filenames of images SHOULD be encoded to prevent a path traversal on the client system, either by using URL encoding or by limiting the allowed character set in the filename.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is <spanx style="emph">snapshot.json</spanx>. The filename on the repository will be <spanx style="emph">61.snapshot.json</spanx>.</t>
  <t>There is an image with the <spanx style="emph">filename acme_firmware.bin</spanx> specified in the Targets metadata, with a SHA3-256 of <spanx style="emph">aaaa</spanx> and a SHA-512/224 of <spanx style="emph">bbbb</spanx>. It will have two filenames on the repository: <spanx style="emph">aaaa.acme_firmware.bin</spanx> and <spanx style="emph">bbbb.acme_firmware.bin</spanx>.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage that permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It could use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository could require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images will be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for Primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.</t>

<t>The Director could encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images on the repository.</t>

<t>The Director repository SHALL implement storage that permits an automated service to write generated metadata files. It could use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository SHALL conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This could be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director could utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director SHOULD drop the request. An implementer can make additional checks if desired. At a minimum, the Director SHOULD check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU version report has not been used before to prevent a replay of the ECU version report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that could be installed. The exact process by which this determination takes place is out of scope for this Standard. However, the Director SHALL take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director could encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementer could use any durable database for this purpose.</t>

<t>The inventory database SHALL record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database can record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-conformant ECU SHALL be able to download and verify image metadata and image binaries before installing a new image and SHALL have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>All ECUs SHALL monitor the download speed of image metadata and image binaries to detect and respond to a slow retrieval attack. If the download is slower than a pre-defined threshold, the ECU SHOULD send an alert to the Director repository, for example as part of the next vehicle version manifest.</t>

<t>Each ECU receiving over-the-air updates in a vehicle is either a Primary or a Secondary ECU. A Primary ECU collects and delivers to the Director vehicle manifests (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time, and downloads and verifies the latest metadata and images for itself and for its Secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs SHALL verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU SHALL perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification. In addition, it can also perform some steps from the full verification process. See the <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs SHALL have a secure source of time. An OEM/Uptane implementer can use any external source of time that is demonstrably secure.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it SHALL have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitimate when it first downloads metadata in the field. See <spanx style="emph">Uptane Deployment Best Practices</spanx> (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs SHALL have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs can also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs SHALL have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU signing key</spanx>. This key, which is unique to the ECU, is used to sign ECU version reports and decrypt images. An ECU key can be either a symmetric key or an asymmetric key. If it is an asymmetric key, there SHOULD be separate keys for encryption and signing. For the purposes of this Standard, the set of keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes. Note that while signing keys are required to be unique to the ECU to avoid replay attacks, the secret keys used to decrypt images need not be unique.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata, and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>Send latest time to Secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Primary SHOULD have a designated set of Secondaries and each Secondary SHALL have at least one Primary responsible for providing its updates</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary can send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary could send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries can send their version reports at any time so that they are already stored on the Primary when it wishes to check for updates. Alternatively, the Primary can request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that SHALL contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g., the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g., the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports SHOULD be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that SHALL contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g., the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e., the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value SHALL change each update cycle.</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There could be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the Primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image even though the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>The Primary SHOULD send the time to each ECU.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL make available to each of its associated Secondaries all new metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this could include fewer metadata files; at a minimum, it includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have sufficient storage to receive it.</t>

<t>For Secondaries without sufficient storage to store a copy of the image, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time. This is optional if the ECU does not have the capacity to verify a time message (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>IF the ECU has the capability to verify a time message, the ECU SHOULD load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU has limited secondary storage, i.e., insufficient buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has sufficient secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and SHALL skip to the next step.) The ECU SHOULD first create a backup of its previous working image and store it elsewhere (e.g., the Primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECU’s hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This could be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the Targets metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has enough secondary storage capacity to store the image, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>When checking hashes, the ECU SHALL additionally check that the length of the image matches the length listed in the metadata.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that have limited secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions could include ensuring the vehicle is in a safe environment for an installation (e.g., the vehicle is parked when updating a specific ECU). Other pre-conditions could include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU SHALL perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

<t>Note that this verification procedure is the smallest set of Uptane checks permissible for an Uptane Secondary ECU. An ECU can additionally implement more metadata checks.</t>

<t>For example, an ECU could also fetch and verify Root metadata from the Director (following the procedure in <xref target="check_root"/>) before checking Targets metadata. Performing this additional check would provide the ECU with a secure way to receive and validate a rotation of the Director’s Targets key.</t>

<t>See <xref target="DEPLOY"/> for more discussion on this topic.</t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification SHALL be performed by Primary ECUs and SHOULD be performed by Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>Before starting full verification, the repository mapping metadata SHALL be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata could be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process SHALL be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process SHOULD be stopped and considered complete. Optionally, implementors can order vehicles to check image repo root metadata when desirable, even in the absence of an update. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU SHALL skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU SHALL perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU can elect to perform this check only on the metadata for the image it will install. (That is, the image metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same filename listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all SHALL match custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter, if one is used, in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU SHALL return an error code indicating the failure. If a check for a specific type of security attack fails (i.e., rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementer. For example, X could be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file SHALL have been signed by the following: (1) a threshold of unique keys specified in the latest Root metadata file (version N), and (2) a threshold of unique keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) SHALL be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementer. For example, Y could be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of unique keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file SHALL match the hashes and version number listed in the Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of unique keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementer. For example, Z could be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file SHALL match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) This step can be skipped when checking Targets metadata on a partial verification ECU, as these ECUs might not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of unique keys specified in the relevant metadata file. (Checks for an arbitrary software attack.):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU SHALL locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it could also be delegated to another role or to multiple roles. Therefore, all delegations SHALL be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download and check the current metadata file, following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it SHALL include the hardware identifier of the target, and the target name SHALL match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this could recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed or aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that SHALL be in agreement about the non-custom metadata for the image. All multi-role delegations SHALL be resolved using the following procedure. Note that there could be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles that have agreeing (i.e., identical) non-custom metadata and “SHALL match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that SHALL be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there is more than one agreeing set of roles, yet each set has different metadata. If a conflict is found, choose and return the metadata from the set of roles that include the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

<!---
Copyright 2022 Joint Development Foundation Projects, LLC, Uptane Series

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>



<reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <author>
      <organization>RFC Publisher</organization>
    </author>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized.  This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
  <format target="https://www.rfc-editor.org/info/rfc2119" type="TXT"/>
</reference>

<reference anchor="RFC3647" target="https://www.rfc-editor.org/info/rfc3647">
  <front>
    <title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
    <author fullname="S. Chokhani" initials="S." surname="Chokhani"/>
    <author fullname="W. Ford" initials="W." surname="Ford"/>
    <author fullname="R. Sabett" initials="R." surname="Sabett"/>
    <author fullname="C. Merrill" initials="C." surname="Merrill"/>
    <author fullname="S. Wu" initials="S." surname="Wu"/>
    <author>
      <organization>RFC Publisher</organization>
    </author>
    <date month="November" year="2003"/>
    <abstract>
      <t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="3647"/>
  <seriesInfo name="DOI" value="10.17487/RFC3647"/>
  <format target="https://www.rfc-editor.org/info/rfc3647" type="TXT"/>
</reference>

<reference anchor="RFC5198" target="https://www.rfc-editor.org/info/rfc5198">
  <front>
    <title>Unicode Format for Network Interchange</title>
    <author fullname="J. Klensin" initials="J." surname="Klensin"/>
    <author fullname="M. Padlipsky" initials="M." surname="Padlipsky"/>
    <author>
      <organization>RFC Publisher</organization>
    </author>
    <date month="March" year="2008"/>
    <abstract>
      <t>The Internet today is in need of a standardized form for the transmission of internationalized "text" information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5198"/>
  <seriesInfo name="DOI" value="10.17487/RFC5198"/>
  <format target="https://www.rfc-editor.org/info/rfc5198" type="TXT"/>
</reference>


<reference anchor="NFC" target="https://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>Secure PyPI downloads with signed repository metadata</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="M." surname="Moore">
      <organization></organization>
    </author>
    <author initials="L." surname="Pühringer">
      <organization></organization>
    </author>
    <author initials="J." surname="Locke">
      <organization></organization>
    </author>
    <author initials="L.A." surname="DeLong">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2019" month="November" day="13"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://uptane.github.io/deployment-considerations/index.html">
  <front>
    <title>Uptane Deployment Best Practices</title>
    <author initials="." surname="Members of the Uptane Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAIRGtGMAA+1923LbSJbgu74Caz+UpCEpS76U7drYXVmSp9RtS15Lruqa
iQ03SIIS2iTABkDJLIf/bN/2x/ZcM08mAEququ7Zidh+6JJBIC8nT577ZTgc
bjV5M89eJh+WTVpkyQX8/zStpsmsrJLjrM6vigSeJKeL5TxbZEWTNnlZbKXj
cZXdwFfvLg/PTram5aRIFzDKikYZ1jLKcEojbE3SJrsqq/XLJC9m5dZWvqxe
JkV5nFX5DQx4k9WX1apuDh49evHoYCutsvRlcnl+fL51W1afrqpytZR/f8rW
8Gj6MjktmqwqsmZ4XKWzZmuLZvyYzssCVrHO6q1l/jL596acDJK6rJoqm9Xw
13qBf/yvra101VyX1cutJBnCkuqXydtsMc6qOilnSXOdKTSOysViVeTNGl5M
Et5i509ldZUW+a8EnJfJn8q8aAB6N9m8XCLQktflCgCCvybvqvJv2aSB5bx5
czRwcAdQZHWyPdkr8Y3ZKPkTACQvkqN0uSzrHZolW6T5vAXk+n9cleXVPCM4
1aNJuaCXa9h01rxMnsHemqq8zCbX9HwCS2nwKD5cHNKDKruiVZ/9wr/Dnl4m
r6qy/DRfF/LJFDa+v3/waH9rqyirBZ0ZQu9h8mc+kWSazZLtix8P37wZJG8P
fxkkFz+ef3hzPEiyZjLC5b9/fXSwv/+Cv/rL6OmjF8m7P58m9TKb8K+Pnz35
nn89yxo8+ORDkePUhIuwrWVa5cUVbgz+U/NHT/dfPOeP9OUzXN9czgIAXy2S
I3jh7PXRS9pMk1ZXCJfrplnWL/f2bm9vRyv+dgTHuFdlS0CYeq+p9p/u8Rd8
Qx7oDO6OHBZF9jl5uP/05YbZ6wc0iMc4/J9i3Sg5Tm/yuv10BcjY0GNAG5gc
QP98uP+Idnp5+C55nKQNnNxNMn30fP959hR+gMfDx917vMqb69UYUWMPsHu1
xDFnFaAzgnmvSZf13nhejvdksOePJo8PDp7vP02ffP/46cGj2UH2fDJ5Onua
jZ9PZ09evMBPHo8WUwueS7o2OHLyWoeWpQ6Tt6t5kw+rcp4BogCqEnjqfsBc
jv48Sv68Wi5XdbpYh79djJLD29t0Gj49GcGVrGDwefj8JwBmnv4aPvzTKHlb
1tdZ8als/cAXLgb9o/3h/nMH/ScK/YPJ+Nn30xcC/Se/D/oy2P7jbLL/4snB
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
gypJFdMtqqklTKa1ndHWcPjftv4vibWt8y8zAQA=

-->

</rfc>

