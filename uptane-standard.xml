<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="." surname="Members of the Uptane Community" fullname="Uptane Community">
      <organization>Joint Development Foundation Projects, LLC, Uptane Series (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2022" month="September" day="27"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process when a compromise occurs.</t>

<t>These instructions delineate the set of requirements necessary for specific ECU implementations to satisfy all conformance stipulations of the Uptane Standard. ISO/IEC 13210:1999 Information Technology, as cited in
the <eref target="https://www.iso.org/obp/ui">ISO Online Browsing Platform</eref> defines a
“conformance requirement” as “a requirement stated in a <spanx style="emph">base standard</spanx> that identifies a specific
requirement in a finite, measurable, and unambiguous manner. A <spanx style="emph">conformance requirement</spanx> by itself or in conjunction with other conformance requirements corresponds to an <spanx style="emph">assertion.</spanx>” Individual implementers can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementers wish to have compatible formats, they can use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementer who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>With the exception of the Conformance terminology and Uptane role terminology presented below, please refer to the <eref target="https://uptane.github.io/deployment-considerations/glossary.html">glossary</eref> in the Deployment Best Practices volume for definitions of all terms used in this Standard.</t>

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>. Given the importance of interpreting these terms correctly, we present these definitions here. Note that when referring to actions in the Standard that mandate conformance, the word SHALL will be used, rather than the word MUST.</t>

<t><spanx style="emph">SHALL</spanx> This word or the term “REQUIRED” mean that the definition is an absolute requirement of the specification.
<spanx style="emph">SHALL NOT</spanx> This phrase means that the definition is an absolute prohibition of the specification.
<spanx style="emph">SHOULD</spanx> This word or the adjective “RECOMMENDED” mean that, in particular circumstances, there could exist valid reasons to ignore a particular item, but the full implications will be understood and carefully weighed before choosing a different course.
<spanx style="emph">SHOULD NOT</spanx> This phrase or the phrase “NOT RECOMMENDED” mean that there could exist valid reasons in particular circumstances when the particular behavior is acceptable or even useful, but the full implications will be understood and the case carefully weighed before implementing any behavior described with this label.
<spanx style="emph">MAY</spanx> This word or the adjective “OPTIONAL,” mean that an item is truly optional.</t>

<t>In order to be considered conformant to the Uptane Standard, an implementation SHALL follow all of these rules as specified in the document.</t>

<t>Note that, following the recommendations of <xref target="RFC2119"/>, imperatives of the type defined here will be used only when essential for security.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegation</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.</t>

<t><spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing the metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-the-uptane-standard" title="Rationale for and scope of the Uptane Standard">

<t>This Standard document provides the essential components for the secure design, implementation, and deployment of Uptane by OEMs and suppliers. These guidelines contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation can refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration, and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation, and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standard-coverage" title="Scope of Standard coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and autonomous aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs SHALL be able to perform public key cryptography operations and calculate hashes of images and metadata files.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s in-vehicle implementation is Uptane-conformant if:</t>

<t><list style="numbers">
  <t>all Primaries perform full verification;</t>
  <t>all Secondaries that are updated via OTA at least perform partial verification; and</t>
  <t>any ECUs that do not perform any type of verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature, all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its Image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the Director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM will first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM will then add the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs can be lacking the necessary resources to function as designated. These insufficient resources could include limited CPU or RAM inadequate for performance of public key cryptography; a lack of sufficient storage to undo installation of bad software; or a location on a low-speed network (e.g., LIN).</t>
  <t>ECUs can reside on different network segments, and cannot directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user can replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle can download only a limited amount of data via a cellular channel (e.g. due to limits on a data plan).</t>
  <t>A system can lack sufficient power to download or install software updates.</t>
  <t>Vehicles can be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs can be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>)  already exist to address this problem. Therefore, there is no need to duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which could substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and will be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate guidelines to ensure that, when any part of the SOTA mechanism of a vehicle is attacked, an attacker has to compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker could have (<xref target="attacker_goals"/>) and the capabilities they could have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers could want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability.</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems.</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions.</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself.</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers could develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability could be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories.</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g., via an OBD port or by using a compromised ECU as a vector).</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle.</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need to protect information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates could attempt one or more of the following strategies:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t><spanx style="emph">Denial of service attack</spanx> against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior could do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This could be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane does not specify implementation details. Instead, this Standard describes the components necessary for a conformant implementation and leaves it up to individual implementers to make their own technology choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install and signed metadata about those images.</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository.</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images.</t>
  <t>A public key infrastructure supporting the required metadata production and signing roles on each repository:
  <list style="symbols">
      <t>Root - The certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata.</t>
      <t>Timestamp - Indicates whether there are new metadata or images.</t>
      <t>Snapshot - Indicates images released by the repository at a point in time via signing metadata about Targets metadata.</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes.</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The Primary ECU can be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata.</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
A repository’s Root role SHALL sign the public keys used to verify the metadata produced by the Timestamp, Snapshot, and Targets roles.
A repository’s Root role SHALL revoke keys for the other roles if they are compromised.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository can delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it SHALL do so as specified in <xref target="delegations_meta"/>.</t>

<t>As responsibility for signing images or a subset of images could be delegated to more than one role, it is possible that two different roles will be trusted to sign a particular image. For this reason, delegations SHALL be prioritized.</t>

<t>A particular delegation for a subset of images could be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images could be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles SHALL sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository SHALL NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It SHALL do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane Standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure can be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings SHALL be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>The <spanx style="emph">Deployment Best Practices</spanx> (<xref target="DEPLOY"/>), Joint Development Foundation Projects, LLC, Uptane Series provides some examples of metadata structures in ASN.1 and JSON that conform to the Standard.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key SHALL be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which could be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role.</t>
</list></t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, and file sizes. It can also include other useful information, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository SHALL have their metadata listed in a Targets role.  Each Targets role can provide a list of some images on the repository.  This list SHALL provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<t>If there are no images included in the Targets metadata from the Director repository, then the metadata SHALL include a vehicle identifier in order to avoid a replay attack.</t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to what is required, Targets metadata files can contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the <spanx style="emph">Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that SHALL be present in the Targets metadata from the Director.</t>

<t>Custom metadata can also contain a demarcated field or section that SHALL match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “SHALL match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information SHALL be provided from the Director repository for each image in the Targets metadata:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that SHOULD install the image.</t>
</list></t>

<t>The Director repository could provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the Director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) SHALL be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file can contain any number of delegations and SHALL keep the delegations in prioritized order.</t>

<t>Any metadata file with delegations SHALL provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key SHOULD have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This could be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g., “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that SHALL sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository can contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the Targets metadata file.</t>
</list></t>

<t>The Snapshot metadata could also list the Root metadata filename and version number for the purpose of backwards compatibility. Historically, this was a requirement in TUF, but it is no longer required and does not provide a significant security benefit.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-conformant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, SHALL be present on all Primary ECUs, and SHALL contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this SHALL include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths could be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that SHALL provide signed Targets metadata for images stored at those paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository.</t>
  <t>The name and URL of the Image repository.</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) SHALL be signed by both the Director and Image repository.</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) provides more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the filename in a metadata file or an ECU, and the filename on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader can read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file is not be known in advance by a client, it could be read from, and written to, a repository using a filename without a version number qualification, i.e., FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file SHALL be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
  <t>Filenames of images SHOULD be encoded to prevent a path traversal on the client system, either by using URL encoding or by limiting the allowed character set in the filename.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is <spanx style="emph">snapshot.json</spanx>. The filename on the repository will be <spanx style="emph">61.snapshot.json</spanx>.</t>
  <t>There is an image with the <spanx style="emph">filename acme_firmware.bin</spanx> specified in the Targets metadata, with a SHA3-256 of <spanx style="emph">aaaa</spanx> and a SHA-512/224 of <spanx style="emph">bbbb</spanx>. It will have two filenames on the repository: <spanx style="emph">aaaa.acme_firmware.bin</spanx> and <spanx style="emph">bbbb.acme_firmware.bin</spanx>.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage that permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It could use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository could require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images will be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for Primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.</t>

<t>The Director could encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images on the repository.</t>

<t>The Director repository SHALL implement storage that permits an automated service to write generated metadata files. It could use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository SHALL conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This could be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director could utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director SHOULD drop the request. An implementer can make additional checks if desired. At a minimum, the Director SHOULD check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU version report has not been used before to prevent a replay of the ECU version report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that could be installed. The exact process by which this determination takes place is out of scope for this Standard. However, the Director SHALL take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director could encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementer could use any durable database for this purpose.</t>

<t>The inventory database SHALL record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database can record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-conformant ECU SHALL be able to download and verify image metadata and image binaries before installing a new image and SHALL have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>All ECUs SHALL monitor the download speed of image metadata and image binaries to detect and respond to a slow retrieval attack. If the download is slower than a pre-defined threshold, the ECU SHOULD send an alert to the Director repository, for example as part of the next vehicle version manifest.</t>

<t>Each ECU receiving over-the-air updates in a vehicle is either a Primary or a Secondary ECU. A Primary ECU collects and delivers to the Director vehicle manifests (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time, and downloads and verifies the latest metadata and images for itself and for its Secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs SHALL verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU SHALL perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification. In addition, it can also perform some steps from the full verification process. See the <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs SHALL have a secure source of time. An OEM/Uptane implementer can use any external source of time that is demonstrably secure.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it SHALL have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitimate when it first downloads metadata in the field. See <spanx style="emph">Uptane Deployment Best Practices</spanx> (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs SHALL have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs can also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs SHALL have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t>An <spanx style="strong">ECU signing key</spanx>. This is a private key, unique to the ECU, used to sign ECU version reports and decrypt images. An ECU key can be either a symmetric key or an asymmetric key. If it is an asymmetric key, there SHOULD be separate keys for encryption and signing. For the purposes of this Standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes. Note that while signing keys are required to be unique to the ECU to avoid replay attacks, the secret keys used to decrypt images need not be unique.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata, and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>Send latest time to Secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Primary SHOULD have a designated set of Secondaries and each Secondary SHALL have at least one Primary responsible for providing its updates</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary can send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary could send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries can send their version reports at any time so that they are already stored on the Primary when it wishes to check for updates. Alternatively, the Primary can request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that SHALL contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g., the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g., the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports SHOULD be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that SHALL contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g., the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e., the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value SHALL change each update cycle.</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There could be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the Primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image even though the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>The Primary SHOULD send the time to each ECU.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL send its latest downloaded metadata to all of its associated Secondaries. The metadata it sends to each Secondary SHALL include all of the metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this could include fewer metadata files; at a minimum, it includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have sufficient storage to receive it.</t>

<t>For Secondaries without sufficient storage to store a copy of the image, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time. This is optional if the ECU does not have the capacity to verify a time message (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>IF the ECU has the capability to verify a time message, the ECU SHOULD load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU has limited secondary storage, i.e., insufficient buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has sufficient secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and SHALL skip to the next step.) The ECU SHOULD first create a backup of its previous working image and store it elsewhere (e.g., the Primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECU’s hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This could be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the Targets metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has enough secondary storage capacity to store the image, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>When checking hashes, the ECU SHALL additionally check that the length of the image matches the length listed in the metadata.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that have limited secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions could include ensuring the vehicle is in a safe environment for an installation (e.g., the vehicle is parked when updating a specific ECU). Other pre-conditions could include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU SHALL perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

<t>Note that this verification procedure is the smallest set of Uptane checks permissible for an Uptane Secondary ECU. An ECU can additionally implement more metadata checks.</t>

<t>For example, an ECU could also fetch and verify Root metadata from the Director (following the procedure in <xref target="check_root"/>) before checking Targets metadata. Performing this additional check would provide the ECU with a secure way to receive and validate a rotation of the Director’s Targets key.</t>

<t>See <xref target="DEPLOY"/> for more discussion on this topic.</t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification SHALL be performed by Primary ECUs and SHOULD be performed by Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>Before starting full verification, the repository mapping metadata SHALL be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata could be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process SHALL be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process SHALL be stopped and considered complete. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU SHALL skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU SHALL perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU can elect to perform this check only on the metadata for the image it will install. (That is, the image metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same filename listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all SHALL match custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter, if one is used, in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU SHALL return an error code indicating the failure. If a check for a specific type of security attack fails (i.e., rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementer. For example, X could be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file SHALL have been signed by the following: (1) a threshold of unique keys specified in the latest Root metadata file (version N), and (2) a threshold of unique keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) SHALL be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementer. For example, Y could be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of unique keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file SHALL match the hashes and version number listed in the Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of unique keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementer. For example, Z could be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file SHALL match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) This step can be skipped when checking Targets metadata on a partial verification ECU, as these ECUs might not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of unique keys specified in the relevant metadata file. (Checks for an arbitrary software attack.):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU SHALL locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it could also be delegated to another role or to multiple roles. Therefore, all delegations SHALL be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download and check the current metadata file, following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it SHALL include the hardware identifier of the target, and the target name SHALL match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this could recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed or aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that SHALL be in agreement about the non-custom metadata for the image. All multi-role delegations SHALL be resolved using the following procedure. Note that there could be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles that have agreeing (i.e., identical) non-custom metadata and “SHALL match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that SHALL be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there is more than one agreeing set of roles, yet each set has different metadata. If a conflict is found, choose and return the metadata from the set of roles that include the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>



<reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized.  This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="RFC3647" target="https://www.rfc-editor.org/info/rfc3647">
  <front>
    <title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
    <author fullname="S. Chokhani" initials="S." surname="Chokhani"/>
    <author fullname="W. Ford" initials="W." surname="Ford"/>
    <author fullname="R. Sabett" initials="R." surname="Sabett"/>
    <author fullname="C. Merrill" initials="C." surname="Merrill"/>
    <author fullname="S. Wu" initials="S." surname="Wu"/>
    <date month="November" year="2003"/>
    <abstract>
      <t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="3647"/>
  <seriesInfo name="DOI" value="10.17487/RFC3647"/>
</reference>

<reference anchor="RFC5198" target="https://www.rfc-editor.org/info/rfc5198">
  <front>
    <title>Unicode Format for Network Interchange</title>
    <author fullname="J. Klensin" initials="J." surname="Klensin"/>
    <author fullname="M. Padlipsky" initials="M." surname="Padlipsky"/>
    <date month="March" year="2008"/>
    <abstract>
      <t>The Internet today is in need of a standardized form for the transmission of internationalized "text" information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5198"/>
  <seriesInfo name="DOI" value="10.17487/RFC5198"/>
</reference>


<reference anchor="NFC" target="https://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>Secure PyPI downloads with signed repository metadata</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="M." surname="Moore">
      <organization></organization>
    </author>
    <author initials="L." surname="Pühringer">
      <organization></organization>
    </author>
    <author initials="J." surname="Locke">
      <organization></organization>
    </author>
    <author initials="L.A." surname="DeLong">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2019" month="November" day="13"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://uptane.github.io/deployment-considerations/index.html">
  <front>
    <title>Uptane Deployment Best Practices</title>
    <author initials="." surname="Members of the Uptane Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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
ATT+/wLlxnYnpTABAA==

-->

</rfc>

