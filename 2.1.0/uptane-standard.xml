<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.35 (Ruby 3.2.2) -->


<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [

]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">
  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation</title>

    <author initials="" surname="Members of the Uptane Community" fullname="Uptane Community">
      <organization>Joint Development Foundation Projects, LLC, Uptane Series (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2023" month="June" day="23"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<?line 141?>

<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>



  </front>

  <middle>


<?line 145?>

<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process when a compromise occurs.</t>

<t>These instructions delineate the set of requirements necessary for specific ECU implementations to satisfy all conformance stipulations of the Uptane Standard. ISO/IEC 13210:1999 Information Technology, as cited in
the <eref target="https://www.iso.org/obp/ui">ISO Online Browsing Platform</eref> defines a
“conformance requirement” as “a requirement stated in a <spanx style="emph">base standard</spanx> that identifies a specific
requirement in a finite, measurable, and unambiguous manner. A <spanx style="emph">conformance requirement</spanx> by itself or in conjunction with other conformance requirements corresponds to an <spanx style="emph">assertion.</spanx>” Individual implementers can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementers wish to have compatible formats, they can use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementer who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>With the exception of the Conformance terminology and Uptane role terminology presented below, please refer to the <eref target="https://uptane.github.io/deployment-considerations/glossary.html">glossary</eref> in the Deployment Best Practices volume for definitions of all terms used in this Standard.</t>

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>. Given the importance of interpreting these terms correctly, we present these definitions here. Note that when referring to actions in the Standard that mandate conformance, the word SHALL will be used, rather than the word MUST.</t>

<t><spanx style="emph">SHALL</spanx> This word or the term “REQUIRED” mean that the definition is an absolute requirement of the specification.
<spanx style="emph">SHALL NOT</spanx> This phrase means that the definition is an absolute prohibition of the specification.
<spanx style="emph">SHOULD</spanx> This word or the adjective “RECOMMENDED” mean that, in particular circumstances, there could exist valid reasons to ignore a particular item, but the full implications will be understood and carefully weighed before choosing a different course.
<spanx style="emph">SHOULD NOT</spanx> This phrase or the phrase “NOT RECOMMENDED” mean that there could exist valid reasons in particular circumstances when the particular behavior is acceptable or even useful, but the full implications will be understood and the case carefully weighed before implementing any behavior described with this label.
<spanx style="emph">MAY</spanx> This word or the adjective “OPTIONAL,” mean that an item is truly optional.</t>

<t>In order to be considered conformant to the Uptane Standard, an implementation SHALL follow all of these rules as specified in the document.</t>

<t>Note that, following the recommendations of <xref target="RFC2119"/>, imperatives of the type defined here will be used only when essential for security.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegation</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.</t>

<t><spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing the metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-the-uptane-standard" title="Rationale for and scope of the Uptane Standard">

<t>This Standard document provides the essential components for the secure design, implementation, and deployment of Uptane by OEMs and suppliers. These guidelines contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation can refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration, and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation, and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standard-coverage" title="Scope of Standard coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and autonomous aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs SHALL be able to perform public key cryptography operations and calculate hashes of images and metadata files.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s in-vehicle implementation is Uptane-conformant if:</t>

<t><list style="numbers">
  <t>all Primaries perform full verification;</t>
  <t>all Secondaries that are updated via OTA at least perform partial verification; and</t>
  <t>any ECUs that do not perform any type of verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature, all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its Image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the Director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM will first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM will then add the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs can be lacking the necessary resources to function as designated. These insufficient resources could include limited CPU or RAM inadequate for performance of public key cryptography; a lack of sufficient storage to undo installation of bad software; or a location on a low-speed network (e.g., LIN).</t>
  <t>ECUs can reside on different network segments, and cannot directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user can replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle can download only a limited amount of data via a cellular channel (e.g. due to limits on a data plan).</t>
  <t>A system can lack sufficient power to download or install software updates.</t>
  <t>Vehicles can be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs can be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). The focus of Uptane is end device security and secure delivery. It addresses one part of the solution, but it is designed to pair well with more holistic solutions, like in-toto <xref target="IN-TOTO"/>, git signing, TPMs, etc. Recently, the Uptane community approved <eref target="https://github.com/uptane/pures/blob/main/pure3.md">Scudo</eref> as an Uptane augmentation that could be adopted as a formal recommendation in the Uptane Deployment Best Practices in the future.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which could substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and will be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate guidelines to ensure that, when any part of the SOTA mechanism of a vehicle is attacked, an attacker has to compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker could have (<xref target="attacker_goals"/>) and the capabilities they could have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers could want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability.</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems.</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions.</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself.</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers could develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability could be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories.</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g., via an OBD port or by using a compromised ECU as a vector).</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle.</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need to protect information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates could attempt one or more of the following strategies:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t><spanx style="emph">Denial of service attack</spanx> against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior could do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This could be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane does not specify implementation details. Instead, this Standard describes the components necessary for a conformant implementation and leaves it up to individual implementers to make their own technology choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install and signed metadata about those images.</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository.</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images.</t>
  <t>A public key infrastructure supporting the required metadata production and signing roles on each repository:
  <list style="symbols">
      <t>Root - The certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata.</t>
      <t>Timestamp - Indicates whether there are new metadata or images.</t>
      <t>Snapshot - Indicates images released by the repository at a point in time via signing metadata about Targets metadata.</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes.</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The Primary ECU can be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata.</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository can delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it SHALL do so as specified in <xref target="delegations_meta"/>.</t>

<t>As responsibility for signing images or a subset of images could be delegated to more than one role, it is possible that two different roles will be trusted to sign a particular image. For this reason, delegations SHALL be prioritized.</t>

<t>A particular delegation for a subset of images could be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images could be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles SHALL sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository SHALL NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It SHALL do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane Standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure can be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings SHALL be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>The <spanx style="emph">Deployment Best Practices</spanx> (<xref target="DEPLOY"/>), Joint Development Foundation Projects, LLC, Uptane Series provides some examples of metadata structures in ASN.1 and JSON that conform to the Standard.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key SHALL be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which could be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role.</t>
</list></t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, and file sizes. It can also include other useful information, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository SHALL have their metadata listed in a Targets role.  Each Targets role can provide a list of some images on the repository.  This list SHALL provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<t>If there are no images included in the Targets metadata from the Director repository, then the metadata SHALL include a vehicle identifier in order to avoid a replay attack.</t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to what is required, Targets metadata files can contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the <spanx style="emph">Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that SHALL be present in the Targets metadata from the Director.</t>

<t>Custom metadata can also contain a demarcated field or section that SHALL match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “SHALL match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information SHALL be provided from the Director repository for each image in the Targets metadata:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that SHOULD install the image.</t>
</list></t>

<t>The Director repository could provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the Director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) SHALL be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file can contain any number of delegations and SHALL keep the delegations in prioritized order.</t>

<t>Any metadata file with delegations SHALL provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key SHOULD have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This could be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g., “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that SHALL sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository can contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the Targets metadata file.</t>
</list></t>

<t>The Snapshot metadata could also list the Root metadata filename and version number for the purpose of backwards compatibility. Historically, this was a requirement in TUF, but it is no longer required and does not provide a significant security benefit.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-conformant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, SHALL be present on all Primary ECUs, and SHALL contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this SHALL include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths could be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that SHALL provide signed Targets metadata for images stored at those paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository.</t>
  <t>The name and URL of the Image repository.</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) SHALL be signed by both the Director and Image repository.</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) provides more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the filename in a metadata file or an ECU, and the filename on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader can read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file is not be known in advance by a client, it could be read from, and written to, a repository using a filename without a version number qualification, i.e., FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file SHALL be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
  <t>Filenames of images SHOULD be encoded to prevent a path traversal on the client system, either by using URL encoding or by limiting the allowed character set in the filename.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is <spanx style="emph">snapshot.json</spanx>. The filename on the repository will be <spanx style="emph">61.snapshot.json</spanx>.</t>
  <t>There is an image with the <spanx style="emph">filename acme_firmware.bin</spanx> specified in the Targets metadata, with a SHA3-256 of <spanx style="emph">aaaa</spanx> and a SHA-512/224 of <spanx style="emph">bbbb</spanx>. It will have two filenames on the repository: <spanx style="emph">aaaa.acme_firmware.bin</spanx> and <spanx style="emph">bbbb.acme_firmware.bin</spanx>.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage that permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It could use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository could require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images will be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for Primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.</t>

<t>The Director could encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images on the repository.</t>

<t>The Director repository SHALL implement storage that permits an automated service to write generated metadata files. It could use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository SHALL conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This could be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director could utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director SHOULD drop the request. An implementer can make additional checks if desired. At a minimum, the Director SHOULD check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
      <t>The time sent in the ECU version report.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU version report has not been used before to prevent a replay of the ECU version report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that could be installed. The exact process by which this determination takes place is out of scope for this Standard. However, the Director SHALL take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director could encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementer could use any durable database for this purpose.</t>

<t>The inventory database SHALL record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database can record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-conformant ECU SHALL be able to download and verify image metadata and image binaries before installing a new image and SHALL have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>All ECUs SHALL monitor the download speed of image metadata and image binaries to detect and respond to a slow retrieval attack. If the download is slower than a pre-defined threshold, the ECU SHOULD send an alert to the Director repository, for example as part of the next vehicle version manifest.</t>

<t>Each ECU receiving over-the-air updates in a vehicle is either a Primary or a Secondary ECU. A Primary ECU collects and delivers to the Director vehicle manifests (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time, and downloads and verifies the latest metadata and images for itself and for its Secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs SHALL verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU SHALL perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification. In addition, it can also perform some steps from the full verification process. See the <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs SHALL have a secure source of time. An OEM/Uptane implementer can use any external source of time that is demonstrably secure.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it SHALL have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitimate when it first downloads metadata in the field. See <spanx style="emph">Uptane Deployment Best Practices</spanx> (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs SHALL have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs can also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs SHALL have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t><spanx style="strong">ECU identity keys</spanx>. These keys, which are unique to each ECU, are used to sign ECU version reports and decrypt images. ECU identity keya can be either symmetric asymmetric key. If asymmetric keys are used, there SHOULD be separate keys for encryption and signing. For the purposes of this Standard, the set of keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes. Note that while identity keys are required to be unique to the ECU to avoid replay attacks, the secret keys used to decrypt images need not be unique.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata, and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>Send latest time to Secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Primary SHOULD have a designated set of Secondaries and each Secondary SHALL have at least one Primary responsible for providing its updates</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary can send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary could send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries can send their version reports at any time so that they are already stored on the Primary when it wishes to check for updates. Alternatively, the Primary can request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that SHALL contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g., the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g., the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports SHOULD be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that SHALL contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g., the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e., the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value SHALL change each update cycle.</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There could be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the Primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image even though the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>The Primary SHOULD send the time to each ECU.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL make available to each of its associated Secondaries all new metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this could include fewer metadata files; at a minimum, it includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have sufficient storage to receive it.</t>

<t>For Secondaries without sufficient storage to store a copy of the image, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time. This is optional if the ECU does not have the capacity to verify a time message (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>IF the ECU has the capability to verify a time message, the ECU SHOULD load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU has limited secondary storage, i.e., insufficient buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has sufficient secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and SHALL skip to the next step.) The ECU SHOULD first create a backup of its previous working image and store it elsewhere (e.g., the Primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECU’s hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This could be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the Targets metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has enough secondary storage capacity to store the image, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>When checking hashes, the ECU SHALL additionally check that the length of the image matches the length listed in the metadata.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that have limited secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions could include ensuring the vehicle is in a safe environment for an installation (e.g., the vehicle is parked when updating a specific ECU). Other pre-conditions could include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU SHALL perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

<t>Note that this verification procedure is the smallest set of Uptane checks permissible for an Uptane Secondary ECU. An ECU can additionally implement more metadata checks.</t>

<t>For example, an ECU could also fetch and verify Root metadata from the Director (following the procedure in <xref target="check_root"/>) before checking Targets metadata. Performing this additional check would provide the ECU with a secure way to receive and validate a rotation of the Director’s Targets key.</t>

<t>See <xref target="DEPLOY"/> for more discussion on this topic.</t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification SHALL be performed by Primary ECUs and SHOULD be performed by Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>Before starting full verification, the repository mapping metadata SHALL be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata could be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process SHALL be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process SHOULD be stopped and considered complete. Optionally, implementors can order vehicles to check image repo root metadata when desirable, even in the absence of an update. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU SHALL skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU SHALL perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU can elect to perform this check only on the metadata for the image it will install. (That is, the image metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same filename listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all SHALL match custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter, if one is used, in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU SHALL return an error code indicating the failure. If a check for a specific type of security attack fails (i.e., rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementer. For example, X could be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file SHALL have been signed by the following: (1) a threshold of unique keys specified in the latest Root metadata file (version N), and (2) a threshold of unique keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) SHALL be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementer. For example, Y could be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of unique keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file SHALL match the hashes and version number listed in the Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of unique keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementer. For example, Z could be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file SHALL match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) This step can be skipped when checking Targets metadata on a partial verification ECU, as these ECUs might not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of unique keys specified in the relevant metadata file. (Checks for an arbitrary software attack.):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU SHALL locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it could also be delegated to another role or to multiple roles. Therefore, all delegations SHALL be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download and check the current metadata file, following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it SHALL include the hardware identifier of the target, and the target name SHALL match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this could recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed or aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that SHALL be in agreement about the non-custom metadata for the image. All multi-role delegations SHALL be resolved using the following procedure. Note that there could be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles that have agreeing (i.e., identical) non-custom metadata and “SHALL match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that SHALL be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there is more than one agreeing set of roles, yet each set has different metadata. If a conflict is found, choose and return the metadata from the set of roles that include the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

<!---
Copyright 2022 Joint Development Foundation Projects, LLC, Uptane Series

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

</section>
</section>
</section>
</section>


  </middle>

  <back>


    <references title='Normative References'>



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized.  This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="RFC5198">
  <front>
    <title>Unicode Format for Network Interchange</title>
    <author fullname="J. Klensin" initials="J." surname="Klensin"/>
    <author fullname="M. Padlipsky" initials="M." surname="Padlipsky"/>
    <date month="March" year="2008"/>
    <abstract>
      <t>The Internet today is in need of a standardized form for the transmission of internationalized "text" information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5198"/>
  <seriesInfo name="DOI" value="10.17487/RFC5198"/>
</reference>


<reference anchor="NFC" target="https://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T. K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T. K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T. K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T. K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T. K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>Secure PyPI downloads with signed repository metadata</title>
    <author initials="T. K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="M." surname="Moore">
      <organization></organization>
    </author>
    <author initials="L." surname="Pühringer">
      <organization></organization>
    </author>
    <author initials="J." surname="Locke">
      <organization></organization>
    </author>
    <author initials="L. A." surname="DeLong">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2019" month="November" day="13"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://uptane.github.io/deployment-considerations/index.html">
  <front>
    <title>Uptane Deployment Best Practices</title>
    <author initials="" surname="Members of the Uptane Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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
xSDzig2Kgmo5I54n1ZTu/HfNmfed0D6m3YpjJhR5Ja3DCHfWmrGh+yKfNpjy
oH+XOlsirHAav69/ejDxlz9MNplY2fExmpdckfrATuem9TintOrtk0lNoQ0g
JsG7TuwBao10tWENSIsGER57N97JG8ZErVyULk01XR8KdGJcPr59cHTcCJQO
tAhmuete2So71kA9GAGWF4BeTIzMHAkWyyyTEm0OF7wm8X8Gjf9v/2U0Gg2O
y9WmIh328MHhYfKXMoeZXiILKlc06yt8ncH9rir/jr3bh8nr18dDV90BU4EG
g9f5NCswagfez5j2Ha2QcSXyy9CiUw/HD5IdfOGe/HRv96fBplwD7De0TC4q
phGz2edptiLzArHtnBKljfXLEOPBbzJAOSGFJCyzLW+BYDTAg7hqmtXz/f2b
m5txSoscl9Xl/oJfqvdfnx6fvD0/GcFCB4MPBRnjLDMcuw8g259SdZJFekNi
Ah4T10MtqJQOnMXQLKUD1/jSh48uihL33QvcjfDe0Xlyen4veXF0fno+HPx6
evHz2YeL5Nej9++P3l6cnpwnZ++T47O3L08vTs/ewr9eJUdvf0v+9fTty6HK
8tlntM2QZIXCU45qoPbp1smVUVn8/iItLteIP5cYqkZsW2t7UCWpYjagmlrC
ZFrbGQ9Go/9n8H8AWwMhwg8zAQA=

-->

</rfc>

