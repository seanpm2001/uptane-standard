<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.35 (Ruby 3.2.2) -->


<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [

]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">
  <front>
    <title abbrev="UPTANE">Uptane Standard for Design and Implementation 2.1.0</title>

    <author initials="" surname="Members of the Uptane Community" fullname="Uptane Community">
      <organization>Joint Development Foundation Projects, LLC, Uptane Series (c/o Prof. Justin Cappos)</organization>
      <address>
        <postal>
          <street>6 MetroTech</street>
          <city>Brooklyn</city>
          <region>NY</region>
          <code>11201</code>
          <country>USA</country>
        </postal>
        <email>uptane-standards@googlegroups.com</email>
      </address>
    </author>

    <date year="2023" month="June" day="23"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<?line 141?>

<t>This document describes a framework for securing ground vehicle software update systems.</t>



    </abstract>



  </front>

  <middle>


<?line 145?>

<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for ground vehicles. This document describes procedures to enable programmers for OEMs and suppliers to securely design and implement this framework in a manner that better protects connected units on ground vehicles. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process when a compromise occurs.</t>

<t>These instructions delineate the set of requirements necessary for specific ECU implementations to satisfy all conformance stipulations of the Uptane Standard. ISO/IEC 13210:1999 Information Technology, as cited in
the <eref target="https://www.iso.org/obp/ui">ISO Online Browsing Platform</eref> defines a
“conformance requirement” as “a requirement stated in a <spanx style="emph">base standard</spanx> that identifies a specific
requirement in a finite, measurable, and unambiguous manner. A <spanx style="emph">conformance requirement</spanx> by itself or in conjunction with other conformance requirements corresponds to an <spanx style="emph">assertion.</spanx>” Individual implementers can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers. If implementers wish to have compatible formats, they can use POUFs. POUFs contain a description of implementation choices as well as data binding formats. An implementer who adopts a POUF, as well as the Uptane Standard, will be able to interoperate with other implementations using that POUF.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>With the exception of the Conformance terminology and Uptane role terminology presented below, please refer to the <eref target="https://uptane.github.io/deployment-considerations/glossary.html">glossary</eref> in the Deployment Best Practices volume for definitions of all terms used in this Standard.</t>

<section anchor="conformance-terminology" title="Conformance terminology">

<t>The keywords REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in <xref target="RFC2119"/>. Given the importance of interpreting these terms correctly, we present these definitions here. Note that when referring to actions in the Standard that mandate conformance, the word SHALL will be used, rather than the word MUST.</t>

<t><spanx style="emph">SHALL</spanx> This word or the term “REQUIRED” mean that the definition is an absolute requirement of the specification.
<spanx style="emph">SHALL NOT</spanx> This phrase means that the definition is an absolute prohibition of the specification.
<spanx style="emph">SHOULD</spanx> This word or the adjective “RECOMMENDED” mean that, in particular circumstances, there could exist valid reasons to ignore a particular item, but the full implications will be understood and carefully weighed before choosing a different course.
<spanx style="emph">SHOULD NOT</spanx> This phrase or the phrase “NOT RECOMMENDED” mean that there could exist valid reasons in particular circumstances when the particular behavior is acceptable or even useful, but the full implications will be understood and the case carefully weighed before implementing any behavior described with this label.
<spanx style="emph">MAY</spanx> This word or the adjective “OPTIONAL,” mean that an item is truly optional.</t>

<t>In order to be considered conformant to the Uptane Standard, an implementation SHALL follow all of these rules as specified in the document.</t>

<t>Note that, following the recommendations of <xref target="RFC2119"/>, imperatives of the type defined here will be used only when essential for security.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane role terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegation</spanx>: A process by which the responsibility of signing metadata about images is assigned to another party.</t>

<t><spanx style="emph">Role</spanx>: A party (human or machine) responsible for signing a certain type of metadata. The role controls keys and is responsible for signing the metadata entrusted to it with these keys. The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root role</spanx>: Signs metadata that distributes and revokes public keys used to verify the Root, Timestamp, Snapshot, and Targets role metadata.</t>
  <t><spanx style="emph">Snapshot role</spanx>: Signs metadata that indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets role</spanx>: Signs metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp role</spanx>: Signs metadata that indicates if there are any new metadata or images on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and abbreviations">

<t><spanx style="emph">CDN</spanx>: Content Delivery Network</t>

<t><spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on a vehicle</t>

<t><spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus</t>

<t><spanx style="emph">OBD</spanx>: On-board diagnostics</t>

<t><spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air</t>

<t><spanx style="emph">UDS</spanx>: Unified Diagnostic Services</t>

<t><spanx style="emph">VIN</spanx>: Vehicle Identification Number</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-the-uptane-standard" title="Rationale for and scope of the Uptane Standard">

<t>This Standard document provides the essential components for the secure design, implementation, and deployment of Uptane by OEMs and suppliers. These guidelines contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<t>However, this specification is intended as an implementation guide, and not as a detailed technical argument about the security properties that Uptane provides.  Readers interested in such documentation can refer to published papers that cover this topic.  <xref target="UPTANEESCAR"/></t>

<section anchor="why-uptane-requires-a-standards-document" title="Why Uptane requires a standards document">

<t>A standards document that can guide the safe design, integration, and deployment of Uptane in vehicles is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on vehicle ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation, and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standard-coverage" title="Scope of Standard coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in ground vehicles, including passenger vehicles, light-duty trucks, heavy-duty trucks, and motorcycles. Uptane could potentially also be applied to other ground vehicles, such as automated shuttles, recreational vehicles, and military ground vehicles. Uptane could even be applied to domains such as IoT devices, medical devices, and autonomous aerial vehicles. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of software update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="assumptions" title="Assumptions">

<t>We assume the following system preconditions for Uptane:</t>

<t><list style="symbols">
  <t>Vehicles have the ability to establish connectivity to required backend services. For example, this could be done through cellular, Wi-Fi, or hard-wired mechanisms.</t>
  <t>ECUs are either directly connected to the communication channel, or are indirectly connected via some sort of network gateway.</t>
  <t>ECUs are programmable and provide sufficient performance to be updated.</t>
  <t>ECUs SHALL be able to perform public key cryptography operations and calculate hashes of images and metadata files.</t>
  <t>There are state-of-the-art secure servers in place, such as the Director and Image repository servers.</t>
</list></t>

<t>It is important that any bugs detected in Uptane implementations be patched promptly. Failure to do so could interfere with the effectiveness of Uptane’s operations.</t>

</section>
<section anchor="use-cases" title="Use cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>An OEM plans to install Uptane on new vehicles. This entails the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and an accurate attestation of the latest time. The OEM then either requires its tier-1 suppliers to provide these materials to the suppliers’ assembly lines or can choose to add the materials later at the OEM’s assembly lines. The OEM’s in-vehicle implementation is Uptane-conformant if:</t>

<t><list style="numbers">
  <t>all Primaries perform full verification;</t>
  <t>all Secondaries that are updated via OTA at least perform partial verification; and</t>
  <t>any ECUs that do not perform any type of verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>A tier-1 supplier completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM mentioned above. Assuming supplier delegation is supported by the OEM for this ECU, each tier-1 supplier digitally signs the image, then delivers the signature, all of its metadata, including delegations, and associated images to the OEM. The OEM adds these metadata and images to its Image repository, along with information about any dependencies and conflicts between this image and those for other ECUs used in the OEM’s vehicles. The OEM also updates the inventory database, so that the Director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="updating-individual-ecus-on-demand" title="Updating individual ECUs on demand">

<t>An OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. The OEM prepares an updated flash image in the manner described above. The OEM then ships USB flash drives to vehicle owners and dealerships that allow those parties to update the firmware of their vehicles.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>The OEM wants to use delta updates to save over-the-air bytes. The delta images contain only the code and/or data that has changed from the previous image version. To do so, the OEM will first modify the Director repository, using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. The OEM will then add the following to the custom Targets metadata used by the Director repository: (1) the algorithm used to apply a delta image, and (2) the Targets metadata about the delta image. The OEM will also check whether the delta images match the Targets metadata from the Director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:</t>

<t><list style="symbols">
  <t>ECUs can be lacking the necessary resources to function as designated. These insufficient resources could include limited CPU or RAM inadequate for performance of public key cryptography; a lack of sufficient storage to undo installation of bad software; or a location on a low-speed network (e.g., LIN).</t>
  <t>ECUs can reside on different network segments, and cannot directly reach each other, requiring a gateway to facilitate communication.</t>
  <t>A user can replace OEM-installed ECUs with aftermarket ECUs.</t>
  <t>A vehicle can download only a limited amount of data via a cellular channel (e.g. due to limits on a data plan).</t>
  <t>A system can lack sufficient power to download or install software updates.</t>
  <t>Vehicles can be offline for extended periods of time, thus missing required updates (e.g., key rotations).</t>
  <t>OEMs can be unwilling to implement costly security or hardware requirements.</t>
</list></t>

</section>
<section anchor="out-of-scope" title="Out of scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the packaged software, such as malware embedded in a trusted package.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). The focus of Uptane is end device security and secure delivery. It addresses one part of the solution, but it is designed to pair well with more holistic solutions, like in-toto <xref target="IN-TOTO"/>, git signing, TPMs, etc. Recently, the Uptane community approved <eref target="https://github.com/uptane/pures/blob/main/pure3.md">Scudo</eref> as an Uptane augmentation that could be adopted as a formal recommendation in the Uptane Deployment Best Practices in the future.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
  <t>Malicious mirrors of package repositories, which could substitute original packages with malicious packages with matching version numbers <xref target="MERCURY"/>.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design requirements">

<t>The design requirements for this document are governed by the following principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and will be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to ensure that, if Uptane is implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the systems that maintain them.</t>
  <t>to delineate guidelines to ensure that, when any part of the SOTA mechanism of a vehicle is attacked, an attacker has to compromise two or more modules to breach the SOTA mechanism.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat model and attack strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals an attacker could have (<xref target="attacker_goals"/>) and the capabilities they could have or could develop (<xref target="capabilities"/>). We then describe and classify types of attacks on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers could want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information, reverse-engineer firmware, or compare two firmware images to identify security fixes and hence determine the fixed security vulnerability.</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems.</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions.</t>
  <t>Control ECUs within the vehicle, and possibly the vehicle itself.</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers could develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability could be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories.</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g., via an OBD port or by using a compromised ECU as a vector).</t>
    </list></t>
  <t>Compromise and control either a Director repository or Image repository server, and any keys stored on that repository, but not both the Director and Image repositories.</t>
  <t>Compromise either a Primary ECU or a Secondary ECU, but not both in the same vehicle.</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model includes the following types of attacks, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read sensitive or confidential information from an update intended to be encrypted for a specific ECU. (Note: Not all implementations will have a need to protect information in this way.)</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny the installation of updates could attempt one or more of the following strategies:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a properly signed, but old, update bundle to the ECUs, even if newer updates exist.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install a valid (signed) update bundle, and then block selected updates within the bundle.</t>
  <t><spanx style="emph">Denial of service attack</spanx> against the Uptane repositories or infrastructure.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behavior could do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously valid software revision that is older than the currently installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a malicious software bundle in which some of the updates do not interoperate properly. This could be accomplished even if all of the individual images being installed are valid, as long as valid versions exist that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="design" title="Detailed design of Uptane">

<t>Uptane does not specify implementation details. Instead, this Standard describes the components necessary for a conformant implementation and leaves it up to individual implementers to make their own technology choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An Image repository containing binary images to install and signed metadata about those images.</t>
      <t>A Director repository connected to an inventory database that can sign metadata on demand for images in the Image repository.</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images.</t>
  <t>A public key infrastructure supporting the required metadata production and signing roles on each repository:
  <list style="symbols">
      <t>Root - The certificate authority for the Uptane ecosystem. Distributes public keys for verifying all the other roles’ metadata.</t>
      <t>Timestamp - Indicates whether there are new metadata or images.</t>
      <t>Snapshot - Indicates images released by the repository at a point in time via signing metadata about Targets metadata.</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes.</t>
    </list></t>
  <t>A secure way for ECUs to know the time.</t>
  <t>An ECU capable of downloading images and associated metadata from the Uptane servers.</t>
  <t>An in-vehicle client on a Primary ECU capable of verifying the signatures on all update metadata and downloading updates on behalf of its associated Secondary ECUs. The Primary ECU can be the same ECU that communicates with the server.</t>
  <t>A client or library on each Secondary ECU capable of performing either full or partial verification of metadata.</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_structures"/>.</t>

<section anchor="root_role" title="The Root role">

<t>A repository’s Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>A repository’s Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="targets_role_delegations" title="Delegations">

<t>The Targets role on the Image repository can delegate the responsibility of signing metadata to other, custom-defined roles referred to as delegated targets. If it does, it SHALL do so as specified in <xref target="delegations_meta"/>.</t>

<t>As responsibility for signing images or a subset of images could be delegated to more than one role, it is possible that two different roles will be trusted to sign a particular image. For this reason, delegations SHALL be prioritized.</t>

<t>A particular delegation for a subset of images could be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search any further if it does not find validly signed metadata about those images. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images could be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that multiple roles are needed to sign a particular image and each of the delegatee roles SHALL sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository SHALL NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>A repository’s Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number of the top-level Targets metadata, and the version numbers of all delegated Targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>A repository’s Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It SHALL do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_structures" title="Metadata structures">

<t>Uptane’s security guarantees all rely on properly created metadata that follows a designated structure. The Uptane Standard <spanx style="strong">does not</spanx> mandate any particular format or encoding for the metadata as a whole. ASN.1 (with any encoding scheme like BER, DER, XER, etc.), JSON, XML, or any other encoding format that is capable of providing the required structure can be used.</t>

<t>However, string comparison is required as part of metadata verification. To ensure an accurate basis for comparing strings, all strings SHALL be encoded in the Unicode Format for Network Interchange as defined in <xref target="RFC5198"/>, including normalization into Unicode Normalization Form C (<xref target="NFC"/>).</t>

<t>The <spanx style="emph">Deployment Best Practices</spanx> (<xref target="DEPLOY"/>), Joint Development Foundation Projects, LLC, Uptane Series provides some examples of metadata structures in ASN.1 and JSON that conform to the Standard.</t>

<section anchor="common_metadata" title="Common metadata structures">

<t>Every public key SHALL be represented using a public key identifier.  A public key identifier is EITHER all of the following:</t>

<t><list style="symbols">
  <t>The value of the public key itself (which could be, for example, formatted as a PEM string)</t>
  <t>The public key cryptographic algorithm used by the key (such as RSA or ECDSA)</t>
  <t>The particular scheme used to verify the signature (such as <spanx style="verb">rsassa-pss-sha256</spanx> or <spanx style="verb">ecdsa-sha2-nistp256</spanx>)</t>
</list></t>

<t>OR a secure hash over at least the above components (such as the keyid mechanism in TUF).</t>

<t>All four Uptane roles (Root, Targets, Snapshot, and Timestamp) share a common structure. They SHALL contain the following two attributes:</t>

<t><list style="symbols">
  <t>A payload of metadata to be signed</t>
  <t>An attribute containing the signature(s) of the payload, where each entry specifies:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>A signature with this key over the payload</t>
    </list></t>
</list></t>

<t>The payload differs depending on the role. However, the payload for all roles shares a common structure. It SHALL contain the following four attributes:</t>

<t><list style="symbols">
  <t>An indicator of the type of role (Root, Targets, Snapshot, or Timestamp)</t>
  <t>An expiration date and time</t>
  <t>An integer version number, which SHOULD be incremented each time the metadata file is updated</t>
  <t>The role-specific metadata for the role indicated</t>
</list></t>

<t>The following sections describe the role-specific metadata. All roles SHALL follow the common structures described here.</t>

</section>
<section anchor="root_meta" title="Root metadata">

<t>A repository’s Root metadata distributes the public keys of the top-level Root, Targets, Snapshot, and Timestamp roles, as well as revocations of those keys. It SHALL contain two attributes:</t>

<t><list style="symbols">
  <t>A representation of the public keys for all four roles. Each key SHALL have a unique public key identifier.</t>
  <t>An attribute mapping each role to (1) its public key(s), and (2) the threshold of signatures required for that role.</t>
</list></t>

</section>
<section anchor="targets_meta" title="Targets metadata">

<t>The Targets metadata on a repository contains all of the information about images to be installed on ECUs. This includes filenames, hashes, and file sizes. It can also include other useful information, such as what types of hardware are compatible with a particular image.</t>

<t>Targets metadata can also contain metadata about delegations, allowing one Targets role to delegate its authority to another. This means that an individual Targets metadata file might contain only metadata about delegations, only metadata about images, or some combination of the two. The details of how ECUs traverse the delegation tree to find valid metadata about images is specified in <xref target="resolve_delegations"/>.</t>

<section anchor="targets_images_meta" title="Metadata about images">

<t>To be available to install on clients, all images on the repository SHALL have their metadata listed in a Targets role.  Each Targets role can provide a list of some images on the repository.  This list SHALL provide, at a minimum, the following information about each image:</t>

<t><list style="symbols">
  <t>The image filename</t>
  <t>The size of the image in bytes</t>
  <t>One or more hashes of the image file, along with the hashing function used</t>
</list></t>

<t>If there are no images included in the Targets metadata from the Director repository, then the metadata SHALL include a vehicle identifier in order to avoid a replay attack.</t>

<section anchor="custom-metadata-about-images" title="Custom metadata about images">

<t>In addition to what is required, Targets metadata files can contain extra metadata for images on the repository. This metadata can be customized for a particular use case. Examples of use cases for different types of custom metadata can be found in the <spanx style="emph">Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>). However, there are a few important pieces of custom metadata that SHOULD be present in most implementations. In addition, there is one element in the custom metadata that SHALL be present in the Targets metadata from the Director.</t>

<t>Custom metadata can also contain a demarcated field or section that SHALL match whenever two pieces of metadata are checked against each other, such as when Targets metadata from the Director repository is checked against Targets metadata from the Image repository.</t>

<t>The information listed below SHOULD be provided for each image on both the Image repository and the Director repository. If a “SHALL match section” is to be implemented, that is where this information SHOULD be placed.</t>

<t><list style="symbols">
  <t>A release counter, to be incremented each time a new version of the image is released. This can be used to prevent rollback attacks even in cases where the Director repository is compromised.</t>
  <t>A hardware identifier, or list of hardware identifiers, representing models of ECUs with which the image is compatible. This can be used to ensure that an ECU cannot be ordered to install an incompatible image, even in cases where the Director repository is compromised.</t>
</list></t>

<t>The following information is CONDITIONALLY REQUIRED for each image on the Director repository IF that image is encrypted:</t>

<t><list style="symbols">
  <t>Information about filenames, hashes, and file size of the encrypted image.</t>
  <t>Information about the encryption method, and other relevant information–for example, a symmetric encryption key encrypted by the ECU’s asymmetric key could be included in the Director repository metadata.</t>
</list></t>

<t>The following information SHALL be provided from the Director repository for each image in the Targets metadata:</t>

<t><list style="symbols">
  <t>An ECU identifier (such as a serial number), specifying the ECU that SHOULD install the image.</t>
</list></t>

<t>The Director repository could provide a download URL for the image file. This may be useful, for example, when the image is on a public CDN and the Director wishes to provide a signed URL.</t>

</section>
</section>
<section anchor="delegations_meta" title="Metadata about delegations">

<t>A Targets metadata file on the Image repository (but not the Director repository) SHALL be able to delegate signing authority to other entities. For example, it could delegate signing authority for a particular ECU’s firmware to that ECU’s supplier. A metadata file can contain any number of delegations and SHALL keep the delegations in prioritized order.</t>

<t>Any metadata file with delegations SHALL provide the following information:</t>

<t><list style="symbols">
  <t>A list of public keys of all delegatees. Each key SHOULD have a unique public key identifier and a key type.</t>
  <t>A list of delegations, each of which contains:
  <list style="symbols">
      <t>A list of the filenames to which this role applies. This could be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>An optional list of the hardware identifiers to which this role applies.  If this is omitted, any hardware identifier will match.</t>
      <t>An indicator of whether or not this is a terminating delegation. (See <xref target="targets_role_delegations"/>.)</t>
      <t>A list of the roles to which this delegation applies. Each role needs to specify:
      <list style="symbols">
          <t>A name for the role (e.g., “supplier1-qa”)</t>
          <t>The key identifiers for each key this role uses</t>
          <t>A threshold of keys that SHALL sign for this role</t>
        </list></t>
    </list></t>
</list></t>

<t>Note that <spanx style="strong">any</spanx> Targets metadata file stored on the Image repository can contain delegations, and these delegations can be in chains of arbitrary length.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot metadata">

<t>The Snapshot metadata lists version numbers and filenames of all Targets metadata files. It protects against mix-and-match attacks if a delegated supplier key is compromised.</t>

<t>For each Targets metadata file on the repository, the Snapshot metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the Targets metadata file.</t>
</list></t>

<t>The Snapshot metadata could also list the Root metadata filename and version number for the purpose of backwards compatibility. Historically, this was a requirement in TUF, but it is no longer required and does not provide a significant security benefit.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp metadata">

<t>The Timestamp metadata SHALL contain the following information:</t>

<t><list style="symbols">
  <t>The filename and version number of the latest Snapshot metadata on the repository.</t>
  <t>One or more hashes of the Snapshot metadata file, along with the hashing function used.</t>
</list></t>

</section>
<section anchor="repo_mapping_meta" title="Repository mapping metadata">

<t>As described in the introduction to <xref target="design"/>, Uptane requires a Director repository and an Image repository. However, it is possible to have an Uptane-conformant implementation that has more than two repositories.</t>

<t>Repository mapping metadata informs a Primary ECU about which repositories to trust for images or image paths. <xref target="TAP-4"/> describes how to make use of more complex repository mapping metadata in order to have more than the two required repositories.</t>

<t>Repository mapping metadata, or the equivalent informational content, SHALL be present on all Primary ECUs, and SHALL contain the following information:</t>

<t><list style="symbols">
  <t>A list of repository names and one or more URLs at which the named repository can be accessed. At a minimum, this SHALL include the Director and Image repositories.</t>
  <t>A list of mappings of image paths to repositories, each of which contains:
  <list style="symbols">
      <t>A list of image paths. Image paths could be expressed using wildcards, or by enumerating a list, or a combination of the two.</t>
      <t>A list of repositories that SHALL provide signed Targets metadata for images stored at those paths.</t>
    </list></t>
</list></t>

<t>For example, in the most basic Uptane case, the repository mapping metadata would contain:</t>

<t><list style="symbols">
  <t>The name and URL of the Director repository.</t>
  <t>The name and URL of the Image repository.</t>
  <t>A single mapping indicating that all images (<spanx style="verb">*</spanx>) SHALL be signed by both the Director and Image repository.</t>
</list></t>

<t>Note that the metadata need not be in the form of a metadata file. For example, in the basic case where there is only one Director and one Image repository, and all images need to have signed metadata from both repositories, it would be sufficient to have a configuration file with URLs for the two repositories and a client that always checks for metadata matches between them. In this case, no explicit mapping would be defined, because the mapping is defined as part of the Uptane client implementation.</t>

<t>The <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) provides more guidance on how to implement repository mapping metadata for more complex use cases. It also discusses strategies for updating repository mapping metadata, if required.</t>

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the filename in a metadata file or an ECU, and the filename on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from, and written to, at the same time. For more details, the reader can read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all files SHALL be written to repositories in accordance with the following two rules:</t>

<t><list style="numbers">
  <t>Metadata filenames SHALL be qualified with version numbers. If a metadata file A is specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT, where VERSION is A’s version number, as defined in <xref target="common_metadata"/>, with one exception: If the version number of the Timestamp metadata file is not be known in advance by a client, it could be read from, and written to, a repository using a filename without a version number qualification, i.e., FILENAME.EXT.</t>
  <t>If an image is specified in a Targets metadata file as FILENAME.EXT, it SHALL be written to the repository as HASH.FILENAME.EXT, where HASH is one of the hash digests of the file, as specified in <xref target="targets_images_meta"/>. The file SHALL be written to the repository using <spanx style="emph">n</spanx> different filenames, one for each hash digest listed in its corresponding Targets metadata.</t>
  <t>Filenames of images SHOULD be encoded to prevent a path traversal on the client system, either by using URL encoding or by limiting the allowed character set in the filename.</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>The version number of the Snapshot metadata file is 61, and its filename in the Timestamp metadata is <spanx style="emph">snapshot.json</spanx>. The filename on the repository will be <spanx style="emph">61.snapshot.json</spanx>.</t>
  <t>There is an image with the <spanx style="emph">filename acme_firmware.bin</spanx> specified in the Targets metadata, with a SHA3-256 of <spanx style="emph">aaaa</spanx> and a SHA-512/224 of <spanx style="emph">bbbb</spanx>. It will have two filenames on the repository: <spanx style="emph">aaaa.acme_firmware.bin</spanx> and <spanx style="emph">bbbb.acme_firmware.bin</spanx>.</t>
</list></t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
</list></t>

<t>Additionally, an Uptane implementation requires ECUs to have a secure way to know the current time.</t>

<section anchor="image-repository" title="Image repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage that permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It could use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository could require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director repository">

<t>The Director repository instructs ECUs as to which images will be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Director repository SHALL expose an interface for Primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.</t>

<t>The Director could encrypt images for ECUs that require them, either by encrypting on-the-fly or by storing encrypted images on the repository.</t>

<t>The Director repository SHALL implement storage that permits an automated service to write generated metadata files. It could use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository SHALL conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>The Director SHOULD first identify the vehicle. This could be done when the Director receives a vehicle version manifest sent by a Primary (as described in <xref target="construct_manifest_primary"/>), decodes the manifest, and determines the unique vehicle identifier. Additionally, the Director could utilize other mechanisms to uniquely identify a vehicle (e.g., 2-way TLS with unique client certificates).</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director SHALL check the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director SHOULD drop the request. An implementer can make additional checks if desired. At a minimum, the Director SHOULD check the following:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the Primary that sent it.</t>
      <t>The signature of each Secondary’s contribution to the manifest matches the ECU key of that Secondary.</t>
      <t>The time sent in the ECU version report.</t>
    </list></t>
  <t>The Director SHOULD check that the nonce or counter in each ECU version report has not been used before to prevent a replay of the ECU version report. If the nonce or counter is reused the Director SHOULD drop the request.</t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that could be installed. The exact process by which this determination takes place is out of scope for this Standard. However, the Director SHALL take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director could encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed on the vehicle, based on the dependency resolution in step 4. This includes Targets (<xref target="targets_meta"/>), Snapshot (<xref target="snapshot_meta"/>), and Timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the Primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementer could use any durable database for this purpose.</t>

<t>The inventory database SHALL record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>An ECU key (symmetric or asymmetric; for asymmetric keys, only the public part SHOULD be stored)</t>
      <t>The ECU key identifier (as defined in <xref target="common_metadata"/>)</t>
      <t>Whether the ECU is a Primary or a Secondary</t>
    </list></t>
</list></t>

<t>The inventory database can record other information about ECUs and vehicles. It SHOULD record a hardware identifier for each ECU to protect against the possibility of directing the ECU to install incompatible firmware.</t>

</section>
</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-conformant ECU SHALL be able to download and verify image metadata and image binaries before installing a new image and SHALL have a secure way of verifying the current time, or a sufficiently recent attestation of the time.</t>

<t>All ECUs SHALL monitor the download speed of image metadata and image binaries to detect and respond to a slow retrieval attack. If the download is slower than a pre-defined threshold, the ECU SHOULD send an alert to the Director repository, for example as part of the next vehicle version manifest.</t>

<t>Each ECU receiving over-the-air updates in a vehicle is either a Primary or a Secondary ECU. A Primary ECU collects and delivers to the Director vehicle manifests (<xref target="vehicle_version_manifest"/>) that contain information about which images have been installed on ECUs in the vehicle. It also verifies the time, and downloads and verifies the latest metadata and images for itself and for its Secondaries. A Secondary ECU verifies the time, and downloads and verifies the latest metadata and images for itself from its associated Primary ECU. It also sends signed information about its installed images to its associated Primary.</t>

<t>All ECUs SHALL verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A Primary ECU SHALL perform full verification (<xref target="full_verification"/>). A Secondary ECU SHOULD perform full verification if possible. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification. In addition, it can also perform some steps from the full verification process. See the <spanx style="emph">Uptane Deployment Best Practices</spanx> document (<xref target="DEPLOY"/>) for a discussion of how to choose between partial and full verification.</t>

<t>ECUs SHALL have a secure source of time. An OEM/Uptane implementer can use any external source of time that is demonstrably secure.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it SHALL have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>A sufficiently recent copy of required Uptane metadata at the time of manufacture or install. This is necessary for the ECU to authenticate that the remote repository is legitimate when it first downloads metadata in the field. See <spanx style="emph">Uptane Deployment Best Practices</spanx> (<xref target="DEPLOY"/>) for more information.
  <list style="symbols">
      <t>Partial verification Secondary ECUs SHALL have the Root and Targets metadata from the Director repository (to reduce the scope of rollback and replay attacks). These ECUs can also have metadata from other roles or the Image repository if they will be used by the Secondary.</t>
      <t>Full verification ECUs SHALL have a complete set of metadata (Root, Targets, Snapshot, and Timestamp) from both repositories (to prevent rollback and replay attacks), as well as the repository mapping metadata (<xref target="repo_mapping_meta"/>). Delegations are not required.</t>
    </list></t>
  <t>The current time, or a secure attestation of a sufficiently recent time.</t>
  <t><spanx style="strong">ECU identity keys</spanx>. These keys, which are unique to each ECU, are used to sign ECU version reports and decrypt images. ECU identity keya can be either symmetric asymmetric key. If asymmetric keys are used, there SHOULD be separate keys for encryption and signing. For the purposes of this Standard, the set of keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes. Note that while identity keys are required to be unique to the ECU to avoid replay attacks, the secret keys used to decrypt images need not be unique.</t>
</list></t>

</section>
<section anchor="what-the-primary-does" title="What the Primary does">

<t>A Primary downloads, verifies, and distributes the latest time, metadata, and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>Send latest time to Secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to Secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to Secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<t>Note that the subsequent sections concerning requirements for a Primary do not prohibit implementing Primary capabilities on an ECU that does not communicate directly with the Uptane repositories. This allows for implementations to have multiple ECUs within the vehicle performing functions equivalent to a Primary.
If multiple such Primaries are included within a vehicle, each Primary SHOULD have a designated set of Secondaries and each Secondary SHALL have at least one Primary responsible for providing its updates</t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The Primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once the complete manifest is built, the Primary can send the manifest to the Director repository. However, it is not strictly required that the Primary send the manifest until step three. If permitted by the implementation, a Primary could send only a diff of the manifest to save bandwidth. If an implementation permits diffs, the Director SHOULD have a way to request a full manifest.</t>

<t>Secondaries can send their version reports at any time so that they are already stored on the Primary when it wishes to check for updates. Alternatively, the Primary can request a version report from each Secondary at the time of the update check.</t>

<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<t>The vehicle version manifest is a metadata structure that SHALL contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload representing the installed versions of each software image on the vehicle. This payload SHALL contain:
  <list style="symbols">
      <t>The vehicle’s unique identifier (e.g., the VIN)</t>
      <t>The Primary ECU’s unique identifier (e.g., the serial number)</t>
      <t>A list of ECU version reports as specified in <xref target="version_report"/></t>
    </list></t>
</list></t>

<t>Note that one of the ECU version reports SHOULD be the version report for the Primary itself.</t>

</section>
<section anchor="version_report" title="ECU version report">

<t>An ECU version report is a metadata structure that SHALL contain the following information:</t>

<t><list style="symbols">
  <t>An attribute containing the signature(s) of the payload, each specified by:
  <list style="symbols">
      <t>The public key identifier of the key being used to sign the payload</t>
      <t>The signing method (i.e., ed25519, rsassa-pss, etc.)</t>
      <t>A hash of the payload to be signed</t>
      <t>The hashing function used (i.e., SHA3-256, SHA-512/224, etc.)</t>
      <t>The signature of the hash</t>
    </list></t>
  <t>A payload containing:
  <list style="symbols">
      <t>The ECU’s unique identifier (e.g., the serial number)</t>
      <t>The filename, length, and hashes of its currently installed image (i.e., the non-custom Targets metadata for this particular image)</t>
      <t>An indicator of any detected security attack</t>
      <t>The latest time the ECU can verify at the time this version report was generated</t>
      <t>A nonce or counter to prevent a replay of the ECU version report. This value SHALL change each update cycle.</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The Primary SHALL load the current time from a secure source.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The Primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The Primary SHALL download and verify images for itself and for all of its associated Secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the Director’s Targets metadata for that image.</t>

<t>There could be several different filenames that all refer to the same image binary, as described in <xref target="metadata_filename_rules"/>. If the Primary has received multiple hashes for a given image binary via the Targets role (see <xref target="targets_images_meta"/>) then it SHALL verify every hash for this image even though the image is identified by a single hash as part of its filename.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to Secondaries">

<t>The Primary SHOULD send the time to each ECU.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to Secondaries">

<t>The Primary SHALL make available to each of its associated Secondaries all new metadata required for verification on that Secondary. For full verification Secondaries, this includes the metadata for all four roles from both repositories, plus any delegated Targets metadata files the Secondary will recurse through to find the proper delegation. For partial verification Secondaries, this could include fewer metadata files; at a minimum, it includes only the Targets metadata file from the Director repository.</t>

<t>The Primary SHOULD determine the minimal set of metadata files to send to each Secondary by performing delegation resolution as described in <xref target="full_verification"/>.</t>

<t>Each Secondary SHALL store the latest copy of all metadata required for its own verification.</t>

</section>
<section anchor="send_images_primary" title="Send images to Secondaries">

<t>The Primary SHALL send the latest image to each of its associated Secondaries that have sufficient storage to receive it.</t>

<t>For Secondaries without sufficient storage to store a copy of the image, the Primary SHOULD wait for a request from the Secondary to stream the new image file to it. The Secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-primary-or-secondary-ecus" title="Installing images on Primary or Secondary ECUs">

<t>An ECU SHALL perform the following steps when attempting to install a new image:</t>

<t><list style="numbers">
  <t>Verify latest attested time. This is optional if the ECU does not have the capacity to verify a time message (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Install image (<xref target="install_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Load and verify the latest attested time">

<t>IF the ECU has the capability to verify a time message, the ECU SHOULD load and verify the current time, or the most recent securely attested time.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU has limited secondary storage, i.e., insufficient buffer storage to temporarily store the latest image before installing it, it SHALL download the latest image from the Primary. (If the ECU has sufficient secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and SHALL skip to the next step.) The ECU SHOULD first create a backup of its previous working image and store it elsewhere (e.g., the Primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the Primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the Targets metadata file from the Director repository.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Construct the Image filename using the rule in <xref target="metadata_filename_rules"/>, or use the download URL specified in the Director metadata.</t>
  <t>If there is no Targets metadata about this image, abort the update cycle and report that there is no such image. Additionally, in the case of failure, the ECU SHALL retain its previous Targets metadata instead of using the new Targets metadata. Otherwise, download the image (up to the number of bytes specified in the Targets metadata) and verify it according to <xref target="verify_image"/>.</t>
</list></t>

<t>When the Primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the Primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest Targets metadata file from the Director.</t>
  <t>Find the Targets metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECU’s hardware identifier.</t>
  <t>Check that the image filename is valid for this ECU. This could be a comparison against a wildcard path, which restricts the ECUs to which a delegation will apply.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the Targets metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the Targets metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that all hashes listed in the metadata match the corresponding hashes of the image.</t>
</list></t>

<t>If the ECU has enough secondary storage capacity to store the image, the checks SHOULD be performed on the image in secondary storage before it is installed.</t>

<t>When checking hashes, the ECU SHALL additionally check that the length of the image matches the length listed in the metadata.</t>

<t>NOTE: See <xref target="DEPLOY"/> for guidance on how to deal with Secondary ECU failures for ECUs that have limited secondary storage.</t>

<t>If any step fails, the ECU SHALL jump to the final step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="install_image" title="Install image">

<t>The ECU SHALL attempt to install the update. This installation SHOULD occur at a time when all pre-conditions are met. These pre-conditions could include ensuring the vehicle is in a safe environment for an installation (e.g., the vehicle is parked when updating a specific ECU). Other pre-conditions could include ensuring the ECU has a backup of its current image and metadata in case the current installation fails.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the Primary (or simply save it to disk, if the ECU is a Primary). The Primary SHOULD write the version reports it receives to disk and associate them with the Secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification procedures">

<t>A Primary ECU SHALL perform full verification of metadata. A Secondary ECU SHOULD perform full verification of metadata. If a Secondary cannot perform full verification, it SHALL, at the very least, perform partial verification.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
</list></t>

<t>Note that this verification procedure is the smallest set of Uptane checks permissible for an Uptane Secondary ECU. An ECU can additionally implement more metadata checks.</t>

<t>For example, an ECU could also fetch and verify Root metadata from the Director (following the procedure in <xref target="check_root"/>) before checking Targets metadata. Performing this additional check would provide the ECU with a secure way to receive and validate a rotation of the Director’s Targets key.</t>

<t>See <xref target="DEPLOY"/> for more discussion on this topic.</t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the Targets metadata about images from the Director repository matches the Targets metadata about the same images from the Image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification SHALL be performed by Primary ECUs and SHOULD be performed by Secondary ECUs. In the following instructions, whenever an ECU is directed to download metadata, it applies only to Primary ECUs.</t>

<t>Before starting full verification, the repository mapping metadata SHALL be consulted to determine where to download metadata from. This procedure assumes the basic Uptane case: there are only two repositories (Director and Image), and all image paths are required to be signed by both repositories. If a more complex repository layout is being used, refer to <xref target="DEPLOY"/> for guidance on how to determine where metadata could be downloaded from.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load and verify the current time or the most recent securely attested time.</t>
  <t>Download and check the Root metadata file from the Director repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Director repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Directory repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, there are no new updates and the verification process SHALL be stopped and considered complete. Otherwise, download and check the Snapshot metadata file from the Director repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the Targets metadata file from the Director repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>If the Targets metadata from the Directory repository indicates that there are no new targets that are not already currently installed, the verification process SHOULD be stopped and considered complete. Optionally, implementors can order vehicles to check image repo root metadata when desirable, even in the absence of an update. Otherwise, download and check the Root metadata file from the Image repository, following the procedure in <xref target="check_root"/>.</t>
  <t>Download and check the Timestamp metadata file from the Image repository, following the procedure in <xref target="check_timestamp"/>.</t>
  <t>Check the previously downloaded Snapshot metadata file from the Image repository (if available). If the hashes and version number of that file match the hashes and version number listed in the new Timestamp metadata, the ECU SHALL skip to the last step. Otherwise, download and check the Snapshot metadata file from the Image repository, following the procedure in <xref target="check_snapshot"/>.</t>
  <t>Download and check the top-level Targets metadata file from the Image repository, following the procedure in <xref target="check_targets"/>.</t>
  <t>Verify that Targets metadata from the Director and Image repositories match. A Primary ECU SHALL perform this check on metadata for all images listed in the Targets metadata file from the Director repository downloaded in step 6. A Secondary ECU can elect to perform this check only on the metadata for the image it will install. (That is, the image metadata from the Director that contains the ECU identifier of the current ECU.) To check that the metadata for an image matches, complete the following procedure:
  <list style="numbers">
      <t>Locate and download a Targets metadata file from the Image repository that contains an image with exactly the same filename listed in the Director metadata, following the procedure in <xref target="resolve_delegations"/>.</t>
      <t>Check that the Targets metadata from the Image repository matches the Targets metadata from the Director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted or encrypted image are the same in both sets of metadata. Note: the Primary is responsible for validating encrypted images and associated metadata. The target ECU (Primary or Secondary) is responsible for validating the unencrypted image and associated metadata.</t>
          <t>Check that all SHALL match custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter, if one is used, in the previous Targets metadata file is less than or equal to the release counter in this Targets metadata file.</t>
        </list></t>
    </list></t>
</list></t>

<t>If any step fails, the ECU SHALL return an error code indicating the failure. If a check for a specific type of security attack fails (i.e., rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

</section>
<section anchor="check_root" title="How to check Root metadata">

<t>To properly check Root metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Load the previous Root metadata file.</t>
  <t>Update to the latest Root metadata file.
  <list style="numbers">
      <t>Let N denote the version number of the latest Root metadata file (which at first could be the same as the previous Root metadata file).</t>
      <t>Try downloading a new version N+1 of the Root metadata file, up to some X number of bytes. The value for X is set by the implementer. For example, X could be tens of kilobytes. The filename used to download the Root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, the current Root metadata file is the latest; continue with step 3.</t>
      <t>Version N+1 of the Root metadata file SHALL have been signed by the following: (1) a threshold of unique keys specified in the latest Root metadata file (version N), and (2) a threshold of unique keys specified in the new Root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at version N of the Root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest Root metadata file (version N) SHALL be less than or equal to the version number of the new Root metadata file (version N+1). Effectively, this means checking that the version number signed in the new Root metadata file is indeed N+1. If the version of the new Root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 1 and version N of the Root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest Root metadata file to the new Root metadata file.</t>
      <t>Repeat steps 2.1 to 2.6.</t>
    </list></t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in the latest Root metadata file. (Checks for a freeze attack.)</t>
  <t>If the Timestamp and/or Snapshot keys have been rotated, delete the previous Timestamp and Snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
</list></t>

</section>
<section anchor="check_timestamp" title="How to check Timestamp metadata">

<t>To properly check Timestamp metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Y number of bytes. The value for Y is set by the implementer. For example, Y could be tens of kilobytes. The filename used to download the Timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
  <t>Check that it has been signed by the threshold of unique keys specified in the latest Root metadata file. If the new Timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Timestamp metadata file, if any, is less than or equal to the version number of this Timestamp metadata file. If the new Timestamp metadata file is older than the trusted Timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Timestamp metadata file. If the new Timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_snapshot" title="How to check Snapshot metadata">

<t>To properly check Snapshot metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to the number of bytes specified in the Timestamp metadata file, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>.</t>
  <t>The hashes and version number of the new Snapshot metadata file SHALL match the hashes and version number listed in the Timestamp metadata. If the hashes and version number do not match, discard the new Snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
  <t>Check that it has been signed by the threshold of unique keys specified in the latest Root metadata file. If the new Snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
  <t>Check that the version number of the previous Snapshot metadata file, if any, is less than or equal to the version number of this Snapshot metadata file. If this Snapshot metadata file is older than the previous Snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
  <t>Check that the version number listed by the previous Snapshot metadata file for each Targets metadata file is less than or equal to its version number in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that each Targets metadata filename listed in the previous Snapshot metadata file is also listed in this Snapshot metadata file. If this condition is not met, discard the new Snapshot metadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Snapshot metadata file. If the new Snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
</list></t>

</section>
<section anchor="check_targets" title="How to check Targets metadata">

<t>To properly check Targets metadata, an ECU SHOULD:</t>

<t><list style="numbers">
  <t>Download up to Z number of bytes, constructing the metadata filename as defined in <xref target="metadata_filename_rules"/>. The value for Z is set by the implementer. For example, Z could be tens of kilobytes.</t>
  <t>The version number of the new Targets metadata file SHALL match the version number listed in the latest Snapshot metadata. If the version number does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.) This step can be skipped when checking Targets metadata on a partial verification ECU, as these ECUs might not have Snapshot metadata.</t>
  <t>Check that the Targets metadata has been signed by the threshold of unique keys specified in the relevant metadata file. (Checks for an arbitrary software attack.):
  <list style="numbers">
      <t>If checking top-level Targets metadata, the threshold of keys is specified in the Root metadata.</t>
      <t>If checking delegated Targets metadata, the threshold of keys is specified in the Targets metadata file that delegated authority to this role.</t>
    </list></t>
  <t>Check that the version number of the previous Targets metadata file, if any, is less than or equal to the version number of this Targets metadata file. (Checks for a rollback attack.)</t>
  <t>Check that the current (or latest securely attested) time is lower than the expiration timestamp in this Targets metadata file. (Checks for a freeze attack.)</t>
  <t>If checking Targets metadata from the Director repository, verify that there are no delegations.</t>
  <t>If checking Targets metadata from the Director repository, check that no ECU identifier is represented more than once.</t>
  <t>If checking Targets metadata from the Director repository, and the ECU performing the verification is the Primary ECU, check that all listed ECU identifiers correspond to ECUs that are actually present in the vehicle.</t>
</list></t>

</section>
<section anchor="resolve_delegations" title="How to resolve delegations">

<t>To properly check Targets metadata for an image, an ECU SHALL locate the metadata file(s) for the role (or roles) that have the authority to sign the image. This metadata might be located in the top-level Targets metadata, but it could also be delegated to another role or to multiple roles. Therefore, all delegations SHALL be resolved using the following recursive procedure, beginning with the top-level Targets metadata file.</t>

<t><list style="numbers">
  <t>Download and check the current metadata file, following the procedure in <xref target="check_targets"/>. If the file cannot be loaded, or if any verification step fails, abort the delegation resolution, and indicate that image metadata cannot be found because of a missing or invalid role.</t>
  <t>If the current metadata file contains signed metadata about the image, end the delegation resolution and return the metadata to be checked.</t>
  <t>If the current metadata file was reached via a terminating delegation and does not contain signed metadata about the image, abort the delegation resolution for this image and return an error indicating that image metadata could not be found.</t>
  <t>Search the list of delegations, in listed order. For each delegation:
  <list style="numbers">
      <t>Check if the delegation applies to the image being processed. For the delegation to apply, it SHALL include the hardware identifier of the target, and the target name SHALL match one of the delegation’s image paths. If either of these tests fail, move on to the next delegation in the list.</t>
      <t>If the delegation is a multi-role delegation, follow the procedure described in <xref target="multirole_delegations"/>. If the multi-role delegation is terminating and no valid image metadata is found, abort the delegation resolution and return an error indicating that image metadata could not be found.</t>
      <t>If the delegation is a normal delegation, perform delegation resolution, starting at step 1. Note that this could recurse an arbitrary number of levels deep. If a delegation that applies to the image is found but no image metadata is found in the delegated roles or any of its sub-delegations, simply continue on with the next delegation in the list. The search is only completed or aborted if image metadata or a terminating delegation that applies to the image is found.</t>
    </list></t>
  <t>If the end of the list of delegations in the top-level metadata is reached without finding valid image metadata, return an error indicating that image metadata could not be found.</t>
</list></t>

</section>
<section anchor="multirole_delegations" title="Multi-role delegations">

<t>It is possible to delegate signing authority to multiple delegated roles as described in <xref target="TAP-3"/>. Each multi-role delegation effectively contains a list of ordinary delegations, plus a threshold of those roles that SHALL be in agreement about the non-custom metadata for the image. All multi-role delegations SHALL be resolved using the following procedure. Note that there could be sub-delegations inside multi-role delegations.</t>

<t><list style="numbers">
  <t>For each of the roles in the delegation, find and load the image metadata following the procedure in <xref target="resolve_delegations"/>.</t>
  <t>Inspect the non-custom part of the metadata loaded in step 1:
  <list style="numbers">
      <t>Locate all sets of roles that have agreeing (i.e., identical) non-custom metadata and “SHALL match” custom metadata. Discard any set of roles with a size smaller than the threshold of roles that SHALL be in agreement for this delegation.</t>
      <t>Check for a conflict. A conflict exists if there is more than one agreeing set of roles, yet each set has different metadata. If a conflict is found, choose and return the metadata from the set of roles that include the earliest role in the multi-delegation list.</t>
      <t>If there is no conflict, check if there is any single set of roles with matching non-custom metadata. If there is, choose and return the metadata from this set.</t>
      <t>If no agreeing set can be found that meets the agreement threshold, return an error indicating that image metadata could not be found.</t>
    </list></t>
</list></t>

<!---
Copyright 2022 Joint Development Foundation Projects, LLC, Uptane Series

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

</section>
</section>
</section>
</section>


  </middle>

  <back>


    <references title='Normative References'>



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized.  This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="RFC5198">
  <front>
    <title>Unicode Format for Network Interchange</title>
    <author fullname="J. Klensin" initials="J." surname="Klensin"/>
    <author fullname="M. Padlipsky" initials="M." surname="Padlipsky"/>
    <date month="March" year="2008"/>
    <abstract>
      <t>The Internet today is in need of a standardized form for the transmission of internationalized "text" information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5198"/>
  <seriesInfo name="DOI" value="10.17487/RFC5198"/>
</reference>


<reference anchor="NFC" target="https://www.unicode.org/reports/tr15/">
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author initials="M." surname="Davis">
      <organization></organization>
    </author>
    <author initials="M." surname="Duerst">
      <organization></organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/blob/d0818e580c322815a473520f2e8cc5f5eb8df499/tap3.md">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T. K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/blob/2cb67d913ec19424d1e354b38f862886fbfd4105/tap4.md">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T. K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T. K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T. K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="UPTANEESCAR" target="https://ssl.engineering.nyu.edu/papers/kuppusamy_escar_16.pdf">
  <front>
    <title>Securing Software Updates for Automobiles</title>
    <author initials="T. K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="A." surname="Brown">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="D." surname="McCoy">
      <organization></organization>
    </author>
    <author initials="R." surname="Bielawski">
      <organization></organization>
    </author>
    <author initials="C." surname="Mott">
      <organization></organization>
    </author>
    <author initials="S." surname="Lauzon">
      <organization></organization>
    </author>
    <author initials="A." surname="Weimerskirch">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2016" month="October" day="16"/>
  </front>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>Secure PyPI downloads with signed repository metadata</title>
    <author initials="T. K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="M." surname="Moore">
      <organization></organization>
    </author>
    <author initials="L." surname="Pühringer">
      <organization></organization>
    </author>
    <author initials="J." surname="Locke">
      <organization></organization>
    </author>
    <author initials="L. A." surname="DeLong">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2019" month="November" day="13"/>
  </front>
</reference>
<reference anchor="DEPLOY" target="https://uptane.github.io/deployment-considerations/index.html">
  <front>
    <title>Uptane Deployment Best Practices</title>
    <author initials="" surname="Members of the Uptane Community">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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
NqCaWsJkWtsZD0aj/2fwfwCWqNdaFTMBAA==

-->

</rfc>

